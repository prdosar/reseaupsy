//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ReseauPsyEntities : DbContext
    {
        public ReseauPsyEntities()
            : base("name=ReseauPsyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accreditation> Accreditations { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<AppointmentStatu> AppointmentStatus { get; set; }
        public virtual DbSet<AreasOfPractice> AreasOfPractices { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<ClientConsultationType> ClientConsultationTypes { get; set; }
        public virtual DbSet<ClientsAgeRange> ClientsAgeRanges { get; set; }
        public virtual DbSet<ClientType> ClientTypes { get; set; }
        public virtual DbSet<ConsultationReason> ConsultationReasons { get; set; }
        public virtual DbSet<ConsultationType> ConsultationTypes { get; set; }
        public virtual DbSet<DayOfTheWeek_PeriodOfTheDay> DayOfTheWeek_PeriodOfTheDay { get; set; }
        public virtual DbSet<DaysOfTheWeek> DaysOfTheWeeks { get; set; }
        public virtual DbSet<ExternalAssociationClientSentStatu> ExternalAssociationClientSentStatus { get; set; }
        public virtual DbSet<ExternalAssociationClientsSent> ExternalAssociationClientsSents { get; set; }
        public virtual DbSet<ExternalAssociation> ExternalAssociations { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<NatureAct> NatureActs { get; set; }
        public virtual DbSet<OfferedService_OfferedServiceType> OfferedService_OfferedServiceType { get; set; }
        public virtual DbSet<OfferedService> OfferedServices { get; set; }
        public virtual DbSet<OfferedServiceType> OfferedServiceTypes { get; set; }
        public virtual DbSet<PeriodsOfTheDay> PeriodsOfTheDays { get; set; }
        public virtual DbSet<ProfessionalTitle> ProfessionalTitles { get; set; }
        public virtual DbSet<ReasonsDeleteClientAppointment> ReasonsDeleteClientAppointments { get; set; }
        public virtual DbSet<ReasonsDeleteClientRequest> ReasonsDeleteClientRequests { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<SpecificSkill> SpecificSkills { get; set; }
        public virtual DbSet<TheoreticalOrientation> TheoreticalOrientations { get; set; }
        public virtual DbSet<TherapistAreaOfPractice> TherapistAreaOfPractices { get; set; }
        public virtual DbSet<TherapistAssociationAndProfessionalOrder> TherapistAssociationAndProfessionalOrders { get; set; }
        public virtual DbSet<TherapistAvailability> TherapistAvailabilities { get; set; }
        public virtual DbSet<TherapistClientAgeRange> TherapistClientAgeRanges { get; set; }
        public virtual DbSet<TherapistClientType> TherapistClientTypes { get; set; }
        public virtual DbSet<TherapistConsultationType> TherapistConsultationTypes { get; set; }
        public virtual DbSet<TherapistLanguage> TherapistLanguages { get; set; }
        public virtual DbSet<TherapistOfferedService> TherapistOfferedServices { get; set; }
        public virtual DbSet<TherapistProfessionalTitle> TherapistProfessionalTitles { get; set; }
        public virtual DbSet<TherapistSpecificSkill> TherapistSpecificSkills { get; set; }
        public virtual DbSet<TherapistTheoreticalOrientation> TherapistTheoreticalOrientations { get; set; }
        public virtual DbSet<ClientAvailability> ClientAvailabilities { get; set; }
        public virtual DbSet<ClientAppointmentRepetition> ClientAppointmentRepetitions { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<ClientPaymentInfo> ClientPaymentInfos { get; set; }
        public virtual DbSet<ResetPassword> ResetPasswords { get; set; }
        public virtual DbSet<ClientLanguage> ClientLanguages { get; set; }
        public virtual DbSet<Therapist> Therapists { get; set; }
        public virtual DbSet<TherapistInfo> TherapistInfo { get; set; }
        public virtual DbSet<ReseauPsyInfo> ReseauPsyInfo { get; set; }
        public virtual DbSet<ClientInfo> ClientInfo { get; set; }
        public virtual DbSet<ExternalClientFee> ExternalClientFee { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<TherapistClientRequest> TherapistClientRequest { get; set; }
        public virtual DbSet<TherapistBill> TherapistBill { get; set; }
        public virtual DbSet<ClientAppointments> ClientAppointments { get; set; }
        public virtual DbSet<TherapistPayInformations> TherapistPayInformations { get; set; }
    
        public virtual ObjectResult<GetListTherapistForClientRequestPage_Result> GetListTherapistForClientRequestPage(Nullable<System.DateTime> therapistRequestStartDate, Nullable<System.DateTime> therapistRequestEndDate, Nullable<int> regionId, string consultationTypeId)
        {
            var therapistRequestStartDateParameter = therapistRequestStartDate.HasValue ?
                new ObjectParameter("TherapistRequestStartDate", therapistRequestStartDate) :
                new ObjectParameter("TherapistRequestStartDate", typeof(System.DateTime));
    
            var therapistRequestEndDateParameter = therapistRequestEndDate.HasValue ?
                new ObjectParameter("TherapistRequestEndDate", therapistRequestEndDate) :
                new ObjectParameter("TherapistRequestEndDate", typeof(System.DateTime));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var consultationTypeIdParameter = consultationTypeId != null ?
                new ObjectParameter("ConsultationTypeId", consultationTypeId) :
                new ObjectParameter("ConsultationTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListTherapistForClientRequestPage_Result>("GetListTherapistForClientRequestPage", therapistRequestStartDateParameter, therapistRequestEndDateParameter, regionIdParameter, consultationTypeIdParameter);
        }
    
        public virtual ObjectResult<GetListClientRequestWaitingForTherapist_Result> GetListClientRequestWaitingForTherapist(Nullable<int> therapistId)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("therapistId", therapistId) :
                new ObjectParameter("therapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClientRequestWaitingForTherapist_Result>("GetListClientRequestWaitingForTherapist", therapistIdParameter);
        }
    
        public virtual ObjectResult<GetClientSentToExternalAssociation_Result> GetClientSentToExternalAssociation(Nullable<bool> isFrench, Nullable<System.DateTime> changedStatusStartDate, Nullable<System.DateTime> changedStatusEndDate, Nullable<int> externalAssociationClientSentStatusId, Nullable<int> externalAssociationId, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("IsFrench", isFrench) :
                new ObjectParameter("IsFrench", typeof(bool));
    
            var changedStatusStartDateParameter = changedStatusStartDate.HasValue ?
                new ObjectParameter("ChangedStatusStartDate", changedStatusStartDate) :
                new ObjectParameter("ChangedStatusStartDate", typeof(System.DateTime));
    
            var changedStatusEndDateParameter = changedStatusEndDate.HasValue ?
                new ObjectParameter("ChangedStatusEndDate", changedStatusEndDate) :
                new ObjectParameter("ChangedStatusEndDate", typeof(System.DateTime));
    
            var externalAssociationClientSentStatusIdParameter = externalAssociationClientSentStatusId.HasValue ?
                new ObjectParameter("ExternalAssociationClientSentStatusId", externalAssociationClientSentStatusId) :
                new ObjectParameter("ExternalAssociationClientSentStatusId", typeof(int));
    
            var externalAssociationIdParameter = externalAssociationId.HasValue ?
                new ObjectParameter("ExternalAssociationId", externalAssociationId) :
                new ObjectParameter("ExternalAssociationId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientSentToExternalAssociation_Result>("GetClientSentToExternalAssociation", isFrenchParameter, changedStatusStartDateParameter, changedStatusEndDateParameter, externalAssociationClientSentStatusIdParameter, externalAssociationIdParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<GetClientSentToExternalAssociationCount_Result> GetClientSentToExternalAssociationCount(Nullable<System.DateTime> changedStatusStartDate, Nullable<System.DateTime> changedStatusEndDate, Nullable<int> externalAssociationClientSentStatusId, Nullable<int> externalAssociationId)
        {
            var changedStatusStartDateParameter = changedStatusStartDate.HasValue ?
                new ObjectParameter("ChangedStatusStartDate", changedStatusStartDate) :
                new ObjectParameter("ChangedStatusStartDate", typeof(System.DateTime));
    
            var changedStatusEndDateParameter = changedStatusEndDate.HasValue ?
                new ObjectParameter("ChangedStatusEndDate", changedStatusEndDate) :
                new ObjectParameter("ChangedStatusEndDate", typeof(System.DateTime));
    
            var externalAssociationClientSentStatusIdParameter = externalAssociationClientSentStatusId.HasValue ?
                new ObjectParameter("ExternalAssociationClientSentStatusId", externalAssociationClientSentStatusId) :
                new ObjectParameter("ExternalAssociationClientSentStatusId", typeof(int));
    
            var externalAssociationIdParameter = externalAssociationId.HasValue ?
                new ObjectParameter("ExternalAssociationId", externalAssociationId) :
                new ObjectParameter("ExternalAssociationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientSentToExternalAssociationCount_Result>("GetClientSentToExternalAssociationCount", changedStatusStartDateParameter, changedStatusEndDateParameter, externalAssociationClientSentStatusIdParameter, externalAssociationIdParameter);
        }
    
        public virtual ObjectResult<GetListAdmin_Result> GetListAdmin(Nullable<bool> isDeleted, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListAdmin_Result>("GetListAdmin", isDeletedParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetListAdminCount(Nullable<bool> isDeleted)
        {
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetListAdminCount", isDeletedParameter);
        }
    
        public virtual ObjectResult<GetTherapistListForAdmin_Result> GetTherapistListForAdmin(Nullable<bool> therapistIsDeleted, Nullable<System.DateTime> therapistRequestStartDate, Nullable<System.DateTime> therapistRequestEndDate, Nullable<bool> isAvailable, Nullable<int> genderId, Nullable<int> clientTypeId, Nullable<int> consultationTypeId, Nullable<int> clientAgeRangeId, Nullable<int> regionId, Nullable<int> professionalTitleId, Nullable<int> languageId, string offeredService_OfferedServiceType, string dayOfTheWeek_PeriodOfTheDay, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var therapistIsDeletedParameter = therapistIsDeleted.HasValue ?
                new ObjectParameter("TherapistIsDeleted", therapistIsDeleted) :
                new ObjectParameter("TherapistIsDeleted", typeof(bool));
    
            var therapistRequestStartDateParameter = therapistRequestStartDate.HasValue ?
                new ObjectParameter("TherapistRequestStartDate", therapistRequestStartDate) :
                new ObjectParameter("TherapistRequestStartDate", typeof(System.DateTime));
    
            var therapistRequestEndDateParameter = therapistRequestEndDate.HasValue ?
                new ObjectParameter("TherapistRequestEndDate", therapistRequestEndDate) :
                new ObjectParameter("TherapistRequestEndDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var clientTypeIdParameter = clientTypeId.HasValue ?
                new ObjectParameter("ClientTypeId", clientTypeId) :
                new ObjectParameter("ClientTypeId", typeof(int));
    
            var consultationTypeIdParameter = consultationTypeId.HasValue ?
                new ObjectParameter("ConsultationTypeId", consultationTypeId) :
                new ObjectParameter("ConsultationTypeId", typeof(int));
    
            var clientAgeRangeIdParameter = clientAgeRangeId.HasValue ?
                new ObjectParameter("ClientAgeRangeId", clientAgeRangeId) :
                new ObjectParameter("ClientAgeRangeId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var professionalTitleIdParameter = professionalTitleId.HasValue ?
                new ObjectParameter("ProfessionalTitleId", professionalTitleId) :
                new ObjectParameter("ProfessionalTitleId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var offeredService_OfferedServiceTypeParameter = offeredService_OfferedServiceType != null ?
                new ObjectParameter("OfferedService_OfferedServiceType", offeredService_OfferedServiceType) :
                new ObjectParameter("OfferedService_OfferedServiceType", typeof(string));
    
            var dayOfTheWeek_PeriodOfTheDayParameter = dayOfTheWeek_PeriodOfTheDay != null ?
                new ObjectParameter("DayOfTheWeek_PeriodOfTheDay", dayOfTheWeek_PeriodOfTheDay) :
                new ObjectParameter("DayOfTheWeek_PeriodOfTheDay", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTherapistListForAdmin_Result>("GetTherapistListForAdmin", therapistIsDeletedParameter, therapistRequestStartDateParameter, therapistRequestEndDateParameter, isAvailableParameter, genderIdParameter, clientTypeIdParameter, consultationTypeIdParameter, clientAgeRangeIdParameter, regionIdParameter, professionalTitleIdParameter, languageIdParameter, offeredService_OfferedServiceTypeParameter, dayOfTheWeek_PeriodOfTheDayParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetTherapistListForAdminCount(Nullable<bool> therapistIsDeleted, Nullable<System.DateTime> therapistRequestStartDate, Nullable<System.DateTime> therapistRequestEndDate, Nullable<bool> isAvailable, Nullable<int> genderId, Nullable<int> clientTypeId, Nullable<int> consultationTypeId, Nullable<int> clientAgeRangeId, Nullable<int> regionId, Nullable<int> professionalTitleId, Nullable<int> languageId, string offeredService_OfferedServiceType, string dayOfTheWeek_PeriodOfTheDay)
        {
            var therapistIsDeletedParameter = therapistIsDeleted.HasValue ?
                new ObjectParameter("TherapistIsDeleted", therapistIsDeleted) :
                new ObjectParameter("TherapistIsDeleted", typeof(bool));
    
            var therapistRequestStartDateParameter = therapistRequestStartDate.HasValue ?
                new ObjectParameter("TherapistRequestStartDate", therapistRequestStartDate) :
                new ObjectParameter("TherapistRequestStartDate", typeof(System.DateTime));
    
            var therapistRequestEndDateParameter = therapistRequestEndDate.HasValue ?
                new ObjectParameter("TherapistRequestEndDate", therapistRequestEndDate) :
                new ObjectParameter("TherapistRequestEndDate", typeof(System.DateTime));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var clientTypeIdParameter = clientTypeId.HasValue ?
                new ObjectParameter("ClientTypeId", clientTypeId) :
                new ObjectParameter("ClientTypeId", typeof(int));
    
            var consultationTypeIdParameter = consultationTypeId.HasValue ?
                new ObjectParameter("ConsultationTypeId", consultationTypeId) :
                new ObjectParameter("ConsultationTypeId", typeof(int));
    
            var clientAgeRangeIdParameter = clientAgeRangeId.HasValue ?
                new ObjectParameter("ClientAgeRangeId", clientAgeRangeId) :
                new ObjectParameter("ClientAgeRangeId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var professionalTitleIdParameter = professionalTitleId.HasValue ?
                new ObjectParameter("ProfessionalTitleId", professionalTitleId) :
                new ObjectParameter("ProfessionalTitleId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var offeredService_OfferedServiceTypeParameter = offeredService_OfferedServiceType != null ?
                new ObjectParameter("OfferedService_OfferedServiceType", offeredService_OfferedServiceType) :
                new ObjectParameter("OfferedService_OfferedServiceType", typeof(string));
    
            var dayOfTheWeek_PeriodOfTheDayParameter = dayOfTheWeek_PeriodOfTheDay != null ?
                new ObjectParameter("DayOfTheWeek_PeriodOfTheDay", dayOfTheWeek_PeriodOfTheDay) :
                new ObjectParameter("DayOfTheWeek_PeriodOfTheDay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTherapistListForAdminCount", therapistIsDeletedParameter, therapistRequestStartDateParameter, therapistRequestEndDateParameter, isAvailableParameter, genderIdParameter, clientTypeIdParameter, consultationTypeIdParameter, clientAgeRangeIdParameter, regionIdParameter, professionalTitleIdParameter, languageIdParameter, offeredService_OfferedServiceTypeParameter, dayOfTheWeek_PeriodOfTheDayParameter);
        }
    
        public virtual ObjectResult<GetListClientForClientRequestPage_Result> GetListClientForClientRequestPage(Nullable<bool> requestToDo, Nullable<bool> isFrench, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var requestToDoParameter = requestToDo.HasValue ?
                new ObjectParameter("RequestToDo", requestToDo) :
                new ObjectParameter("RequestToDo", typeof(bool));
    
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("IsFrench", isFrench) :
                new ObjectParameter("IsFrench", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClientForClientRequestPage_Result>("GetListClientForClientRequestPage", requestToDoParameter, isFrenchParameter, startDateParameter, endDateParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetListClientForClientRequestPageCount(Nullable<bool> requestToDo, Nullable<bool> isFrench, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var requestToDoParameter = requestToDo.HasValue ?
                new ObjectParameter("RequestToDo", requestToDo) :
                new ObjectParameter("RequestToDo", typeof(bool));
    
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("IsFrench", isFrench) :
                new ObjectParameter("IsFrench", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetListClientForClientRequestPageCount", requestToDoParameter, isFrenchParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetListAppointmentForAdmin_Result> GetListAppointmentForAdmin(Nullable<bool> isFrench, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> appointmentStatusId, Nullable<int> therapistId, string appointmentReclamationStatus, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("isFrench", isFrench) :
                new ObjectParameter("isFrench", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var appointmentStatusIdParameter = appointmentStatusId.HasValue ?
                new ObjectParameter("appointmentStatusId", appointmentStatusId) :
                new ObjectParameter("appointmentStatusId", typeof(int));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("therapistId", therapistId) :
                new ObjectParameter("therapistId", typeof(int));
    
            var appointmentReclamationStatusParameter = appointmentReclamationStatus != null ?
                new ObjectParameter("appointmentReclamationStatus", appointmentReclamationStatus) :
                new ObjectParameter("appointmentReclamationStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListAppointmentForAdmin_Result>("GetListAppointmentForAdmin", isFrenchParameter, startDateParameter, endDateParameter, appointmentStatusIdParameter, therapistIdParameter, appointmentReclamationStatusParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<GetListAppointmentForAdminCount_Result> GetListAppointmentForAdminCount(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> appointmentStatusId, Nullable<int> therapistId, string appointmentReclamationStatus)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var appointmentStatusIdParameter = appointmentStatusId.HasValue ?
                new ObjectParameter("appointmentStatusId", appointmentStatusId) :
                new ObjectParameter("appointmentStatusId", typeof(int));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("therapistId", therapistId) :
                new ObjectParameter("therapistId", typeof(int));
    
            var appointmentReclamationStatusParameter = appointmentReclamationStatus != null ?
                new ObjectParameter("appointmentReclamationStatus", appointmentReclamationStatus) :
                new ObjectParameter("appointmentReclamationStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListAppointmentForAdminCount_Result>("GetListAppointmentForAdminCount", startDateParameter, endDateParameter, appointmentStatusIdParameter, therapistIdParameter, appointmentReclamationStatusParameter);
        }
    
        public virtual ObjectResult<GetListClientToConfirmPresence_Result> GetListClientToConfirmPresence(Nullable<int> therapistId)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClientToConfirmPresence_Result>("GetListClientToConfirmPresence", therapistIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetListTherapistBillSentCount(Nullable<int> therapistId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endTime)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetListTherapistBillSentCount", therapistIdParameter, startDateParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<GetListTherapistBillSent_Result> GetListTherapistBillSent(Nullable<int> therapistId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endTime, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListTherapistBillSent_Result>("GetListTherapistBillSent", therapistIdParameter, startDateParameter, endTimeParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<GetListIncommingAppointmentTherapist_Result> GetListIncommingAppointmentTherapist(Nullable<int> appointmentCount, Nullable<int> therapistId)
        {
            var appointmentCountParameter = appointmentCount.HasValue ?
                new ObjectParameter("AppointmentCount", appointmentCount) :
                new ObjectParameter("AppointmentCount", typeof(int));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("therapistId", therapistId) :
                new ObjectParameter("therapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListIncommingAppointmentTherapist_Result>("GetListIncommingAppointmentTherapist", appointmentCountParameter, therapistIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetListClientReceiptCount(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string clientName, Nullable<int> therapistId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetListClientReceiptCount", startDateParameter, endDateParameter, clientNameParameter, therapistIdParameter);
        }
    
        public virtual ObjectResult<GetListTherapistBillForAdmin_Result> GetListTherapistBillForAdmin(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isPayed, Nullable<int> therapistId, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isPayedParameter = isPayed.HasValue ?
                new ObjectParameter("IsPayed", isPayed) :
                new ObjectParameter("IsPayed", typeof(bool));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListTherapistBillForAdmin_Result>("GetListTherapistBillForAdmin", startDateParameter, endDateParameter, isPayedParameter, therapistIdParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetListTherapistBillForAdminCount(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isPayed, Nullable<int> therapistId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isPayedParameter = isPayed.HasValue ?
                new ObjectParameter("IsPayed", isPayed) :
                new ObjectParameter("IsPayed", typeof(bool));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetListTherapistBillForAdminCount", startDateParameter, endDateParameter, isPayedParameter, therapistIdParameter);
        }
    
        public virtual ObjectResult<GetListTherapistBillPaymentForAdminExcel_Result> GetListTherapistBillPaymentForAdminExcel(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListTherapistBillPaymentForAdminExcel_Result>("GetListTherapistBillPaymentForAdminExcel", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetListTherapistBillSentForAdminExcel_Result> GetListTherapistBillSentForAdminExcel(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListTherapistBillSentForAdminExcel_Result>("GetListTherapistBillSentForAdminExcel", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<VerifiyIfTherapistInscriptionCompleted_Result> VerifiyIfTherapistInscriptionCompleted(Nullable<int> therapistId)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VerifiyIfTherapistInscriptionCompleted_Result>("VerifiyIfTherapistInscriptionCompleted", therapistIdParameter);
        }
    
        public virtual ObjectResult<GetCancelationCountByCancelationReason_Result> GetCancelationCountByCancelationReason(Nullable<bool> isFrench, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("IsFrench", isFrench) :
                new ObjectParameter("IsFrench", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCancelationCountByCancelationReason_Result>("GetCancelationCountByCancelationReason", isFrenchParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetTherapistClosingRates_Result> GetTherapistClosingRates(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTherapistClosingRates_Result>("GetTherapistClosingRates", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetInfosAdminDashboard_Result> GetInfosAdminDashboard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInfosAdminDashboard_Result>("GetInfosAdminDashboard");
        }
    
        public virtual ObjectResult<GetListClientAppointmentNotPayed_Result> GetListClientAppointmentNotPayed(Nullable<int> therapistId)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClientAppointmentNotPayed_Result>("GetListClientAppointmentNotPayed", therapistIdParameter);
        }
    
        public virtual ObjectResult<GetClientListForAdminClientListPage_Result> GetClientListForAdminClientListPage(Nullable<int> therapistId, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientListForAdminClientListPage_Result>("GetClientListForAdminClientListPage", therapistIdParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetClientListForAdminClientListPageCount(Nullable<int> therapistId)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetClientListForAdminClientListPageCount", therapistIdParameter);
        }
    
        public virtual ObjectResult<GetClientListForTherapistClientListPage_Result> GetClientListForTherapistClientListPage(Nullable<int> pageNumber, Nullable<int> resultPerPage, Nullable<int> therapistId, Nullable<bool> isActive, Nullable<bool> isExternalClient)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isExternalClientParameter = isExternalClient.HasValue ?
                new ObjectParameter("IsExternalClient", isExternalClient) :
                new ObjectParameter("IsExternalClient", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientListForTherapistClientListPage_Result>("GetClientListForTherapistClientListPage", pageNumberParameter, resultPerPageParameter, therapistIdParameter, isActiveParameter, isExternalClientParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetClientListForTherapistClientListPageCount(Nullable<int> therapistId, Nullable<bool> isActive, Nullable<bool> isExternalClient)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isExternalClientParameter = isExternalClient.HasValue ?
                new ObjectParameter("IsExternalClient", isExternalClient) :
                new ObjectParameter("IsExternalClient", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetClientListForTherapistClientListPageCount", therapistIdParameter, isActiveParameter, isExternalClientParameter);
        }
    
        public virtual ObjectResult<GetListClientsForTherapistAppointment_Result> GetListClientsForTherapistAppointment(Nullable<int> therapistId, Nullable<bool> isFrench)
        {
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("IsFrench", isFrench) :
                new ObjectParameter("IsFrench", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClientsForTherapistAppointment_Result>("GetListClientsForTherapistAppointment", therapistIdParameter, isFrenchParameter);
        }
    
        public virtual ObjectResult<GetListClientReceipt_Result> GetListClientReceipt(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string clientName, Nullable<int> therapistId, Nullable<int> pageNumber, Nullable<int> resultPerPage)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var resultPerPageParameter = resultPerPage.HasValue ?
                new ObjectParameter("ResultPerPage", resultPerPage) :
                new ObjectParameter("ResultPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClientReceipt_Result>("GetListClientReceipt", startDateParameter, endDateParameter, clientNameParameter, therapistIdParameter, pageNumberParameter, resultPerPageParameter);
        }
    
        public virtual ObjectResult<GetListClientNameSuggestion_Result> GetListClientNameSuggestion(string textEntered, Nullable<int> therapistId)
        {
            var textEnteredParameter = textEntered != null ?
                new ObjectParameter("textEntered", textEntered) :
                new ObjectParameter("textEntered", typeof(string));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("therapistId", therapistId) :
                new ObjectParameter("therapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClientNameSuggestion_Result>("GetListClientNameSuggestion", textEnteredParameter, therapistIdParameter);
        }
    
        public virtual ObjectResult<GetClientReceiptsForExcel_Result> GetClientReceiptsForExcel(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string clientName, Nullable<int> therapistId, Nullable<bool> isFrench)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("IsFrench", isFrench) :
                new ObjectParameter("IsFrench", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientReceiptsForExcel_Result>("GetClientReceiptsForExcel", startDateParameter, endDateParameter, clientNameParameter, therapistIdParameter, isFrenchParameter);
        }
    
        public virtual ObjectResult<GetListClaimableAppointmentForTherapistClaimForm_Result> GetListClaimableAppointmentForTherapistClaimForm(Nullable<bool> isFrench, Nullable<int> therapistId)
        {
            var isFrenchParameter = isFrench.HasValue ?
                new ObjectParameter("IsFrench", isFrench) :
                new ObjectParameter("IsFrench", typeof(bool));
    
            var therapistIdParameter = therapistId.HasValue ?
                new ObjectParameter("TherapistId", therapistId) :
                new ObjectParameter("TherapistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListClaimableAppointmentForTherapistClaimForm_Result>("GetListClaimableAppointmentForTherapistClaimForm", isFrenchParameter, therapistIdParameter);
        }
    }
}

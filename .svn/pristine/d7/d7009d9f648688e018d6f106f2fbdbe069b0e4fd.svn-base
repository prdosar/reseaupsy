@model ReseauPsy.ViewModel.Admin.DetailsTherapistViewModel
@using ReseauPsy.Resources
@using System.Globalization
@{
    ViewBag.Title = Resource.DetailTherapist_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var serviceTypeNames = "";



    string showOpqDiv = "d-none";

    if (Model.TherapistAccreditationId == 1 || Model.TherapistAccreditationId == 2)
    {
        showOpqDiv = "";
    }

    string title = Model.TherapistId == null ?
                      Resource.DetailsTherapist_CreateTherapist :
                      Resource.DetailsTherapist_EditTherapist;

}

<section id="page-admin-detailtherapist">

    <div class="container">

        <h1>@title</h1>



        <div class="row">

            @*Last name*@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Lastname <span class="lbl-required">*</span></label>
                    <input type="text" id="js-detail-therapist-last-name" class="form-control" value="@Model.TherapistLastName" />
                </div>
            </div>

            @* First name *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Firstname <span class="lbl-required">*</span></label>
                    <input type="text" id="js-detail-therapist-first-name" class="form-control" value="@Model.TherapistFirstName" />
                </div>
            </div>

        </div>

        <div class="row">


            @* Email *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Email <span class="lbl-required">*</span></label>
                    <input type="text" id="js-detail-therapist-email" class="form-control" value="@Model.TherapistEmail" />
                </div>
            </div>

            @* Phone *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Phone</label>
                    <input type="text" id="js-detail-therapist-phone" class="form-control" value="@Model.TherapistPhoneNumber" />
                </div>
            </div>
        </div>

        <div class="row">
            @* Gender *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Gender</label>
                    <select id="js-detail-therapist-gender" class="form-select">
                        <option value="null">@Global.Choose</option>
                        @foreach (var gender in Model.Genders)
                        {
                            <option value="@gender.Value"
                                    @(Model.TherapistGenderId.ToString() == gender.Value ? "selected='selected'" : "")>
                                @gender.Text
                            </option>
                        }
                    </select>
                </div>
            </div>

            <div class="col-sm-6">
                <div class="row">
                    <div class="col-sm-6">
                        @* Max weekly request *@
                        <div class="form-group">
                            <label>@Resource.DetailTherapist_MaxRequest</label>
                            <input type="text" id="js-detail-therapist-max-request" class="form-control" value="@Model.TherapistMaxWeeklyRequest" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        @* Hiring date *@
                        <div class="form-group">
                            <label>@Global.HiringDate <span class="lbl-required">*</span></label>
                            <input type="text" id="js-detail-therapist-hiring-date" class="form-control js-date-picker" value="@Model.TherapistHiringDate" autocomplete="off" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">

            @* Adress *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Address</label>
                    <input type="text" id="js-detail-therapist-adress" class="form-control" value="@Model.TherapistAdress" />
                </div>
            </div>

            @* City *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.City</label>
                    <input type="text" id="js-detail-therapist-city" class="form-control" value="@Model.TherapistCity" />
                </div>
            </div>
        </div>

        <div class="row">

            @* Postal code *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.PostalCode</label>
                    <input type="text" id="js-detail-therapist-postal-code" class="form-control" value="@Model.TherapistPostalCode" />
                </div>
            </div>

            @* Region *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Region</label>
                    <select id="js-detail-therapist-region" class="form-select">
                        <option value="null">@Global.Choose</option>
                        @foreach (var region in Model.Regions)
                        {
                            <option value="@region.Value"
                                    @(Model.TherapistRegionId.ToString() == region.Value ? "selected='selected'" : "")>
                                @region.Text
                            </option>
                        }
                    </select>
                </div>
            </div>
        </div>



        <div class="row">

            <div class="col-12">
                <hr />
                <h4>Accréditation</h4>
            </div>


            @* Accreditation *@
            <div class="col-sm-6">
                <div class="form-group">
                    <label>@Global.Accreditation</label>
                    <select id="js-detail-therapist-accreditation" class="form-select">
                        <option value="null">@Global.Choose</option>
                        @foreach (var acc in Model.Accreditations)
                        {
                            <option value="@acc.Value"
                                    @(Model.TherapistAccreditationId.ToString() == acc.Value ? "selected='selected'" : "")>
                                @acc.Text
                            </option>
                        }
                    </select>
                </div>
            </div>

            @* OPQ Number *@
            <div id="js-detail-therapist-opq-div" class="col-sm-6 @showOpqDiv">
                <div class="form-group">
                    <label>@Global.OPQNumber</label>
                    <input type="text" id="js-detail-therapist-opq" class="form-control" value="@Model.TherapistOpqNumber" />
                </div>
            </div>
        </div>






        <div class="row">
            <div class="col-12">
                <hr />
                <h4>@Global.RateAndSalary</h4>
            </div>

            <div class="col-sm-6">
                <div class="row">

                    <div class="col-sm-6">
                        @* Is taxable *@
                        <div class="form-group">
                            <label>Facturer les taxes</label><br />
                            <input type="checkbox"
                                   id="js-detail-therapist-is-taxable"
                                   @(Model.TherapistIsTaxable ? "checked='true'" : "") />
                            <label class="lblcheck" for="js-detail-therapist-is-taxable">@Global.IsTaxable</label>
                        </div>

                    </div>
                </div>
            </div>

            <div class="col-sm-12">
                <div id="js-detail-therapist-taxes-row" class="row @(Model.TherapistIsTaxable ? "" : "d-none")">
                    @* TPS *@
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@Global.TPSNumber <span class="lbl-required">*</span></label>
                            <input type="text" id="js-detail-therapist-tps" class="form-control" value="@Model.TherapistTpsNumber" />
                        </div>
                    </div>

                    @* TVQ *@
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@Global.TVQNumber <span class="lbl-required">*</span></label>
                            <input type="text" id="js-detail-therapist-tvq" class="form-control" value="@Model.TherapistTvqNumber" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-12 mt-3">
                <div class="row">
                    <div class="col-sm-12">


                        @* Taux et tarif *@
                        <div class="table-responsive">

                            <table style="min-width:600px;">
                                <thead>
                                    <tr>
                                        <th style="width:600px;">Nom %NR%</th>
                                        <th style="width:600px;">@Global.HourlySalary</th>
                                        <th style="width:600px;">@Global.HourlyClientCost</th>
                                        <th style="width:600px;">Defaut %NR%</th>
                                        <th style="width:150px;">@Global.Action</th>
                                    </tr>
                                </thead>
                                <tbody id="js-wage-tablebody">
                                    @foreach (var wage in Model.TherapistWages)
                                    {
                                        <tr class="js-wage-row">
                                            <td class="js-wage-name">
                                                @wage.PayInfoName
                                            </td>
                                            <td class='js-therapist-wage'>
                                                @wage.TherapistHourlyWage.ToString(CultureInfo.InvariantCulture)
                                            </td>
                                            <td class='js-client-cost'>
                                                @wage.ClientHourlyCost.ToString(CultureInfo.InvariantCulture)
                                            </td>
                                            <td class="js-wage-is-default">
                                                @(wage.IsDefault == true ? Global.Yes : Global.No)
                                            </td>
                                            <td class='js-tableButton'>
                                                <input type='hidden'
                                                       class="js-detail-therapist-wage"
                                                       value='@(wage.Id + "--split--" + wage.PayInfoName + "--split--" + wage.TherapistHourlyWage.ToString(CultureInfo.InvariantCulture) + "--split--" + wage.ClientHourlyCost.ToString(CultureInfo.InvariantCulture) + "--split--" + wage.IsDefault)' />

                                                <input type="hidden"
                                                       class="js-wage-is-deletable"
                                                       value="@(wage.ClientAppointments.Where(x => x.ClientBillGeneratedDate == null).Count() == 0 ? "true" : "false")" />

                                                <input type="hidden"
                                                       class="js-wage-id"
                                                       value="@wage.Id" />

                                                <div class='btn btn-primary wageModifyRow'>@Global.Edit</div>

                                                @* On peut seulement delete les taux qui n'ont pas de rendez-vous dans le futur *@
                                                @if(wage.ClientAppointments.Where(x => x.ClientBillGeneratedDate == null).Count() == 0)
                                                {
                                                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    <tr id="js-wage-footer">
                                        <td style="max-width: 600px;" class="js-wage-name">
                                            <input class="form-control" type="text" />
                                        </td>
                                        <td style="max-width: 600px;" class="js-therapist-wage">
                                            <input class="form-control" type="text" />
                                        </td>
                                        <td style="max-width: 600px;" class="js-client-cost">
                                            <input class="form-control" type="text" />
                                        </td>
                                        <td style="max-width: 600px;" class="js-wage-is-default">
                                            <input class="form-check-input" type="checkbox" />
                                        </td>
                                        <td style="max-width: 150px;">
                                            <div id="wageAddRow" class="btn btn-green"><i class="fa-solid fa-plus"></i></div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                        </div>


                    </div>
                </div>
            </div>




        </div>



        <div class="checkbox-section">
            <div class="row justify-content-between">

                <div class="col-12">
                    <hr />
                    <h4>@Global.Profil</h4>
                </div>

                @* Professional titles *@
                <div class="col-md-6 col-xl">
                    <div class="form-group">
                        <label>@Global.ProfessionnalTitle</label>
                        <div class="row">
                            @foreach (var profTitle in Model.ProfessionalTitles)
                            {
                                <div class="col-12">
                                    <input type="checkbox"
                                           class="js-detail-therapist-prof-title"
                                           value="@profTitle.Id"
                                           @(Model.TherapistProfessionalTitleIds.Contains(profTitle.Id) == true ? "checked='true'" : "") />
                                    <span>@(CultureInfo.CurrentCulture.Name == "fr-CA" ? profTitle.ProfessionalTitle1 : profTitle.ProfessionalTitleEN)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @* CLient type *@
                <div class="col-md-6 col-xl">
                    <div class="form-group">
                        <label>@Global.ClientType</label>
                        <div class="row">
                            @foreach (var clientType in Model.ClientTypes)
                            {
                                <div class="col-12">
                                    <input type="checkbox"
                                           class="js-detail-therapist-client-type"
                                           value="@clientType.Id"
                                           @(Model.TherapistClientTypeIds.Contains(clientType.Id) == true ? "checked='true'" : "") />
                                    <span>@(CultureInfo.CurrentCulture.Name == "fr-CA" ? clientType.ClientType1 : clientType.ClientTypeEN)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @* Language *@
                <div class="col-md-6 col-xl">
                    <div class="form-group">
                        <label>@Global.Language</label>
                        <div class="row">
                            @foreach (var language in Model.Languages)
                            {
                                <div class="col-12">
                                    <input type="checkbox"
                                           class="js-detail-therapist-language"
                                           value="@language.Id"
                                           @(Model.TherapistLanguageIds.Contains(language.Id) == true ? "checked='true'" : "") />
                                    <span>@(CultureInfo.CurrentCulture.Name == "fr-CA" ? language.Language1 : language.LanguageEN)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>



                @* Client age *@
                <div class="col-md-6 col-xl">
                    <div class="form-group">
                        <label>@Global.ClientAge</label>
                        <div class="row">
                            @foreach (var clientAge in Model.ClientsAgeRanges)
                            {
                                <div class="col-12">
                                    <input type="checkbox"
                                           class="js-detail-therapist-client-age"
                                           value="@clientAge.Id"
                                           @(Model.TherapistClientsAgeRangeIds.Contains(clientAge.Id) == true ? "checked='true'" : "") />
                                    <span>@(CultureInfo.CurrentCulture.Name == "fr-CA" ? clientAge.ClientAgeRange : clientAge.ClientAgeRangeEN)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @* Consultation type *@
                <div class="col-md-6 col-xl">
                    <div class="form-group">
                        <label>@Global.ConsultationType</label>
                        <div class="row">
                            @foreach (var conferenceType in Model.ConsultationTypes)
                            {
                                <div class="col-12">
                                    <input type="checkbox"
                                           class="js-detail-therapist-consultation-type"
                                           value="@conferenceType.Id"
                                           @(Model.TherapistConsultationTypeIds.Contains(conferenceType.Id) == true ? "checked='true'" : "") />
                                    <span>@(CultureInfo.CurrentCulture.Name == "fr-CA" ? conferenceType.ConsultationType1 : conferenceType.ConsultationTypeEN)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>



            </div>
        </div>



        <div class="row">

            @* Certification *@
            <div class="col-sm-6">
                <div>@Global.Certification</div>
                <textarea id="js-detail-therapist-certification" class="form-control" rows="4" cols="50">@Model.TherapistCertification</textarea>
            </div>

            @* Admin notes *@
            <div class="col-sm-6">
                <div>@Global.AdminNote</div>
                <textarea id="js-detail-therapist-admin-notes" class="form-control" rows="4" cols="50">@Model.TherapistAdminNotes</textarea>
            </div>
        </div>



        <div class="row">

            @* Assurance client *@
            <div class="col-sm-6">
                <div class="row">
                    <div class="col-12">
                        <div class="form-group">
                            <label>@Resource.DetailTherapist_ClientFromInsurance</label>

                            <select class="form-select" id="js-detail-therapist-assurance">
                                <option value="null" @(Model.TherapistTakeClientFromAssuranceCompany == null ? "selected='true'" : "")>@Global.Choose</option>
                                <option value="true" @(Model.TherapistTakeClientFromAssuranceCompany == true ? "selected='true'" : "")>@Global.Yes</option>
                                <option value="false" @(Model.TherapistTakeClientFromAssuranceCompany == false ? "selected='true'" : "")>@Global.No</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">


            @* Third party client *@
            <div class="col-sm-6">
                <div class="row">
                    <div class="col-12">
                        <div class="form-group">
                            <label>@Resource.DetailTherapist_ClientFromThirdParty</label>

                            <select id="js-detail-therapist-third-party" class="form-select">
                                <option value="null" @(Model.TherapistTakeClientFromThirdPayer == null ? "selected='true'" : "")>@Global.Choose</option>
                                <option value="true" @(Model.TherapistTakeClientFromThirdPayer == true ? "selected='true'" : "")>@Global.Yes</option>
                                <option value="false" @(Model.TherapistTakeClientFromThirdPayer == false ? "selected='true'" : "")>@Global.No</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">



            @* Interested in formation *@
            <div class="col-sm-6">
                <div class="row">
                    <div class="col-12">
                        <label>@Resource.DetailTherapist_InterestedInFormation</label>

                        <select id="js-detail-therapist-interested-formation" class="form-select">
                            <option value="null" @(Model.TherapistIsInterestedForFormation == null ? "selected='true'" : "")>@Global.Choose</option>
                            <option value="true" @(Model.TherapistIsInterestedForFormation == true ? "selected='true'" : "")>@Global.Yes</option>
                            <option value="false" @(Model.TherapistIsInterestedForFormation == false ? "selected='true'" : "")>@Global.No</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>







        <div class="row">

            <div class="col-12">
                <hr />
                <h4>@Global.Avaibility</h4>
            </div>


            @* Availabilities *@
            <div class="col-sm-6">
                <div class="form-group availability">
                    <label>@Global.Avaibility</label>
                    @foreach (var day in Model.Days)
                    {
                        <div class="row">
                            <div class="col-sm-3">
                                @(CultureInfo.CurrentCulture.Name == "fr-CA" ? day.DayOfTheWeek : day.DayOfTheWeekEN)
                            </div>
                            @foreach (var period in day.DayOfTheWeek_PeriodOfTheDay)
                            {
                                <div class="col-4 col-sm-3">
                                    <input type="checkbox"
                                           class="js-detail-therapist-availability"
                                           value="@period.Id"
                                           @(Model.TherapistAvailabilities.Contains(period.Id) == true ? "checked='true'" : "") />
                                    @(CultureInfo.CurrentCulture.Name == "fr-CA" ? period.PeriodsOfTheDay.PeriodOfTheDay : period.PeriodsOfTheDay.PeriodOfTheDayEN)
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>



        <hr />

        @* Association *@
        <h4>@Global.AssociationOrOrder</h4>
        <div class="table-responsive">

            <table style="min-width:600px;">
                <thead>
                    <tr>
                        <th style="width:600px;">@Global.AssociationOrOrder</th>
                        <th style="width:600px;">@Global.AssociationOrOrderNumber</th>
                        <th style="width:150px;">@Global.Action</th>
                    </tr>
                </thead>
                <tbody id="js-association-tablebody">
                    @foreach (var association in Model.TherapistAssociation)
                    {
                        <tr>
                            <td class='js-associationName'>
                                @association.Split(new string[] { "--split--" }, StringSplitOptions.None)[0]
                            </td>
                            <td class='js-associationNumber'>
                                @association.Split(new string[] { "--split--" }, StringSplitOptions.None)[1]
                            </td>
                            <td class='js-tableButton'>
                                <input type='hidden'
                                       class="js-detail-therapist-association"
                                       value='@association.Split(new string[] { "--split--"}, StringSplitOptions.None)[0]--split--@association.Split(new string[] { "--split--"}, StringSplitOptions.None)[1]' />
                                <div class='btn btn-primary associationModifyRow'>@Global.Edit</div>
                                <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                            </td>
                        </tr>
                    }
                    <tr id="js-association-footer">
                        <td style="max-width: 600px;" class="js-associationName">
                            <input class="form-control" type="text" />
                        </td>
                        <td style="max-width: 600px;" class="js-associationNumber">
                            <input class="form-control" type="text" />
                        </td>
                        <td style="max-width: 150px;">
                            <div id="associationAddRow" class="btn btn-green"><i class="fa-solid fa-plus"></i></div>
                        </td>
                    </tr>
                </tbody>
            </table>

        </div>


        @* Offered service *@
        <h4 class="mt-4">@Global.OfferedService</h4>
        <div class="table-responsive">
            <table style="min-width:600px;">
                <thead>
                    <tr>
                        <th style="width:600px;">@Global.OfferedService</th>
                        <th style="width:600px;">@Global.ServiceType</th>
                        <th style="width:150px;">@Global.Action</th>
                    </tr>
                </thead>
                <tbody id="js-detail-therapist-offered-service-tbody">
                    @foreach (var service in Model.TherapistService)
                    {
                        @(serviceTypeNames = "")
                        <tr>
                            <td class='js-service-name'>@Model.ServiceName.Where(x => x.Id == Convert.ToInt32(service.Split(',')[0])).Select(x => x.Name).Single()</td>
                            <td class='js-service-type'>
                                @foreach (var typeId in service.Substring(service.IndexOf(',') + 1).Split(','))
                                {
                                    serviceTypeNames += Model.ServiceTypeNames
                                        .Where(x => x.Id == Convert.ToInt32(typeId))
                                        .Select(x => x.Name)
                                        .Single() + ", ";
                                }
                                @serviceTypeNames.Remove(serviceTypeNames.Length - 2)
                            </td>
                            <td class='js-tableButton'>
                                <input type='hidden'
                                       data-service-id='@service.Split(',')[0]'
                                       data-service-type-ids='@service.Substring(service.IndexOf(',') + 1)'
                                       class="js-detail-therapist-service"
                                       value='@service' />

                                <div class='btn btn-primary js-service-modify-row'>@Global.Edit</div>
                                <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                            </td>
                        </tr>
                    }
                    <tr id="js-detail-therapist-add-service-tr">
                        <td style="max-width:600px;" class="js-service-name">
                            <select class="js-ddl-offered-service form-select">
                                <option value="null">@Global.Choose</option>
                                @foreach (var service in Model.OfferedServices)
                                {
                                    <option value="@service.Service.Id">@service.Service.Name</option>
                                }
                            </select>
                        </td>
                        <td style="max-width:600px;" class="js-service-type"></td>
                        <td style="max-width:150px;">
                            <div id="ServiceAddRow" class="btn btn-green"><i class="fa-solid fa-plus"></i></div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>


        @* PRactice sector *@
        <h4 class="mt-4">@Global.AreaPractice</h4>
        <div class="table-responsive">
            <table style="min-width:400px;">
                <thead>
                    <tr>
                        <th style="width:600px;">@Global.AreaPractice</th>
                        <th style="width:600px;" class="Area-filling-cells"></th>
                        <th style="width:150px;">@Global.Action</th>
                    </tr>
                </thead>
                <tbody id="js-detail-therapist-practice-tbody">
                    @foreach (var item in Model.TherapistAreasOfPracticeIds)
                    {
                        <tr>
                            <td class='js-practice-name'>
                                @Model.AreasOfPractice.Where(x => x.Id == item).Select(x => x.Name).Single()
                            </td>
                            <td class="Area-filling-cells"></td>
                            <td class='js-tableButton'>
                                <input type='hidden'
                                       data-practice-id='@item'
                                       class="js-detail-therapist-sector"
                                       value='@item' />
                                <div class='btn btn-primary js-practice-modify-row'>@Global.Edit</div>
                                <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                            </td>
                        </tr>
                    }

                    <tr id="js-detail-therapist-practice-add-row-tr">
                        <td style="max-width:600px;" class="js-practice-name">
                            <select class="form-select js-ddl-practice">
                                <option value="null">@Global.Choose</option>
                                @foreach (var area in Model.AreasOfPractice)
                                {
                                    <option value="@area.Id">@area.Name</option>
                                }
                            </select>
                        </td>
                        <td style="max-width:600px;" class="Area-filling-cells"></td>
                        <td style="max-width:150px;">
                            <div id="js-practice-add-row" class="btn btn-green"><i class="fa-solid fa-plus"></i></div>
                        </td>
                    </tr>
                </tbody>
            </table>

        </div>

        @* Theoretical orientation *@
        <h4 class="mt-4">@Global.TheoricalOrientation</h4>
        <div class="table-responsive">

            <table style="min-width:400px;">
                <thead>
                    <tr>
                        <th style="width:600px;">@Global.TheoricalOrientation</th>
                        <th style="width:600px;" class="Orientation-filling-cells"></th>
                        <th style="width:150px;">@Global.Action</th>
                    </tr>
                </thead>
                <tbody id="js-detail-therapist-orientation-tbody">
                    @foreach (var orientationId in Model.TherapistTheoreticalOrientationIds)
                    {
                        <tr>
                            <td class='js-orientation-name'>
                                @Model.TheoreticalOrientations.Where(x => x.Id == orientationId).Select(x => x.Name).Single()
                            </td>
                            <td class='Orientation-filling-cells'></td>
                            <td class='js-orientation-buttons'>
                                <input type='hidden'
                                       data-orientation-id='@orientationId'
                                       class='js-detail-therapist-orientation'
                                       value='@orientationId' />
                                <div class='btn btn-primary js-orientation-modify-row'>@Global.Edit</div>
                                <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                            </td>
                        </tr>
                    }
                    <tr id="js-detail-therapist-add-orientation-tr">
                        <td style="max-width:600px;" class="js-orientation-name">
                            <select class="form-select js-detail-therapist-orientation-ddl">
                                <option value="null">@Global.Choose</option>
                                @foreach (var orientation in Model.TheoreticalOrientations)
                                {
                                    <option value="@orientation.Id">@orientation.Name</option>
                                }
                            </select>
                        </td>
                        <td style="max-width:600px;" class='Orientation-filling-cells'></td>
                        <td style="max-width:150px;" class="js-orientation-buttons">
                            <div id="js-orientation-add-row" class="btn btn-green"><i class="fa-solid fa-plus"></i></div>
                        </td>
                    </tr>
                </tbody>
            </table>

        </div>

        @* Specific skills *@
        <h4 class="mt-4">@Global.SpecificSkill</h4>
        <div class="table-responsive">

            <table style="min-width:400px;">
                <thead>
                    <tr>
                        <th style="width:600px;">@Global.SpecificSkill</th>
                        <th style="width:600px;" class='Competences-filling-cells'></th>
                        <th style="width:150px;">@Global.Action</th>
                    </tr>
                </thead>
                <tbody id="js-detail-therapist-skills-tbody">
                    @foreach (var skillId in Model.TherapistSpecificSkillIds)
                    {
                        <tr>
                            <td class='js-skill-name'>
                                @Model.SpecificSkills.Where(x => x.Id == skillId).Select(x => x.Name).Single()
                            </td>
                            <td class='Competences-filling-cells'></td>
                            <td class='js-skill-buttons'>
                                <input type='hidden'
                                       data-skill-id='@skillId'
                                       class='js-detail-therapist-skill'
                                       value='@skillId' />
                                <div class='btn btn-primary js-skill-modify-row'>@Global.Edit</div>
                                <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                            </td>
                        </tr>
                    }
                    <tr id="js-detail-therapist-add-skills-tr">
                        <td style="max-width:600px;" class="js-skill-name">
                            <select class="form-select js-detail-therapist-skills-ddl">
                                <option value="null">@Global.Choose</option>
                                @foreach (var skill in Model.SpecificSkills)
                                {
                                    <option value="@skill.Id">@skill.Name</option>
                                }
                            </select>
                        </td>
                        <td style="max-width:600px;" class='Competences-filling-cells'></td>
                        <td style="max-width:150px;" class="js-skill-buttons">
                            <div id="js-skill-add-row" class="btn btn-green"><i class="fa-solid fa-plus"></i></div>
                        </td>
                    </tr>
                </tbody>
            </table>

        </div>


        @* Error email used *@
        <div id="js-detail-therapist-error-email-used" class="row d-none">
            <div class="col-12">
                <div class="alert alert-danger">@Global.Email_AlreadyUsed</div>
            </div>
        </div>

        @* Buttons *@
        <div class="row">
            <div class="col-12 mt-4 text-center">
                <a href="@Url.Action("TherapistList", "admin")" class="btn btn-secondary">@Global.Cancel</a>
                <input type="hidden" id="js-detail-therapist-id" value="@Model.TherapistId" />
                <div id="js-detail-therapist-send" class="btn btn-primary">@Model.ButtonAddEditText</div>
            </div>
        </div>

    </div>

</section>


@section scripts
{
    <script>
        //----------------------------------------- Remove Error class ---------------

        //Last name
        $("#js-detail-therapist-last-name").on("change", function () {
            GenericCheckDefaultFieldError($(this), $(this).val(), "")
        })

        //First name
        $("#js-detail-therapist-first-name").on("change", function () {
            GenericCheckDefaultFieldError($(this), $(this).val(), "")
        })

        //Email
        $("#js-detail-therapist-email").on("change", function () {
            VerifyFieldWithRegex($(this), $(this).val(), /^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)
        })

        //Hiring date
        $("#js-detail-therapist-hiring-date").on("change", function () {
            var hiringDate = $(this).val()

            var momentDate = moment(`${hiringDate.split('-')[2]}-${hiringDate.split('-')[1]}-${hiringDate.split('-')[0]}`)
            $(this).removeClass("input-validation-error")

            if (!momentDate.isValid() || hiringDate == "") {
                $(this).addClass("input-validation-error")
            }
        })



        //----------------------------------------- Send form ------------------------

        $("#js-detail-therapist-send").on("click", function () {
            var therapistId = $("#js-detail-therapist-id").val()

            if (therapistId == "") {
                //Mode creation
                CreateTherapist()
            }
            else {
                //Mode edit
                EditTherapist()
            }
        })

        function CreateTherapist() {

            if (!VerifyFields()) {
                return false
            }

            datas = CreateDataRequestJson()

            $.ajax({
                type: "POST",
                url: "/fr/admin/CreateTherapist/",
                data: JSON.stringify(datas),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    if (data.result == 'Redirect')
                        window.location = data.url;

                    else if (data.error == "emailUsed") {
                        $("#js-detail-therapist-error-email-used").removeClass("d-none")
                    }

                    else {
                        toastr["error"]
                            ("@Global.GenericError",
                                "@Global.Error");
                    }
                },
                error: function () {
                    toastr["error"]
                        ("@Global.GenericError",
                            "@Global.Error");
                }
            });

        }

        function EditTherapist() {
            if (!VerifyFields()) {
                return false
            }

            datas = CreateDataRequestJson()

            $.ajax({
                type: "POST",
                url: "/fr/admin/EditTherapist/",
                data: JSON.stringify(datas),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    if (data.result == 'Redirect')
                        window.location = data.url;

                    @*if (data.success == true) {
                        $("#js-detail-therapist-error-email-used").addClass("d-none")

                        toastr["success"]
                            ("@Resource.DetailTherapist_SuccedeedModified",
                                "@Global.Success");
                    }*@

                    else if (data.error == "emailUsed") {
                        $("#js-detail-therapist-error-email-used").removeClass("d-none")
                    }

                    else {
                        toastr["error"]
                            ("@Global.GenericError",
                                "@Global.Error");
                    }
                },
                error: function () {
                    toastr["error"]
                        ("@Global.GenericError",
                            "@Global.Error");
                }
            });
        }

        function CreateDataRequestJson() {


            var therapistId = $("#js-detail-therapist-id").val()
            var lastName = EscapeHtmlEntities($("#js-detail-therapist-last-name").val())
            var firstName = EscapeHtmlEntities($("#js-detail-therapist-first-name").val())
            var email = EscapeHtmlEntities($("#js-detail-therapist-email").val())
            var phone = EscapeHtmlEntities($("#js-detail-therapist-phone").val())
            var genderId = ($("#js-detail-therapist-gender").val() == "null") ? "" : $("#js-detail-therapist-gender").val()
            var hiringDate = EscapeHtmlEntities(toInternationnalDate($("#js-detail-therapist-hiring-date").val()))
            var maxWeeklyRequest = EscapeHtmlEntities($("#js-detail-therapist-max-request").val())
            var adress = EscapeHtmlEntities($("#js-detail-therapist-adress").val())
            var city = EscapeHtmlEntities($("#js-detail-therapist-city").val())
            var postalCode = EscapeHtmlEntities($("#js-detail-therapist-postal-code").val())
            var regionId = ($("#js-detail-therapist-region").val() == "null") ? "" : $("#js-detail-therapist-region").val()
            var accreditationId = ($("#js-detail-therapist-accreditation").val() == "null") ? "" : $("#js-detail-therapist-accreditation").val()
            var opqNumber

            if (accreditationId == 1 || accreditationId == 2)
                opqNumber = EscapeHtmlEntities($("#js-detail-therapist-opq").val())

            var isTaxable = $("#js-detail-therapist-is-taxable").is(":checked")
            var tpsNumber
            var tvqNumber

            if (isTaxable) {
                tpsNumber = EscapeHtmlEntities($("#js-detail-therapist-tps").val())
                tvqNumber = EscapeHtmlEntities($("#js-detail-therapist-tvq").val())
            }

            var profTitleIds = []
            var clientTypeIds = []
            var clientAgeIds = []
            var consultationTypeIds = []
            var languageIds = []
            var availabilities = []

            var certification = EscapeHtmlEntities($("#js-detail-therapist-certification").val())
            var adminNote = EscapeHtmlEntities($("#js-detail-therapist-admin-notes").val())

            var takeAssurance = ($("#js-detail-therapist-assurance").val() == "null") ? "" : $("#js-detail-therapist-assurance").val()
            var takeThirdParty = ($("#js-detail-therapist-third-party").val() == "null") ? "" : $("#js-detail-therapist-third-party").val()
            var isInterestedFormation = ($("#js-detail-therapist-interested-formation").val() == "null") ? "" : $("#js-detail-therapist-interested-formation").val()


            var wages = []
            var association = []
            var offeredService = []
            var practice = []
            var orientation = []
            var skill = []


            //Professional title
            $(".js-detail-therapist-prof-title:checked").each(function () {
                profTitleIds.push($(this).val())
            })

            //Client type
            $(".js-detail-therapist-client-type:checked").each(function () {
                clientTypeIds.push($(this).val())
            })

            //Client age
            $(".js-detail-therapist-client-age:checked").each(function () {
                clientAgeIds.push($(this).val())
            })

            //Consultation type
            $(".js-detail-therapist-consultation-type:checked").each(function () {
                consultationTypeIds.push($(this).val())
            })

            //Language
            $(".js-detail-therapist-language:checked").each(function () {
                languageIds.push($(this).val())
            })

            //Availabilities
            $(".js-detail-therapist-availability:checked").each(function () {
                availabilities.push($(this).val())
            })

            //Wages
            $(".js-detail-therapist-wage").each(function () {
                wages.push(EscapeHtmlEntities($(this).val()))
            })

            //Association
            $(".js-detail-therapist-association").each(function () {
                association.push(EscapeHtmlEntities($(this).val()))
            })

            //Service
            $(".js-detail-therapist-service").each(function () {
                offeredService.push($(this).val())
            })

            //Parctice
            $(".js-detail-therapist-sector").each(function () {
                practice.push($(this).data("practice-id"))
            })

            //Orientation
            $(".js-detail-therapist-orientation").each(function () {
                orientation.push($(this).data("orientation-id"))
            })

            //Skill
            $(".js-detail-therapist-skill").each(function () {
                skill.push($(this).data("skill-id"))
            })


            datas = {
                TherapistId : therapistId,
                LastName: lastName,
                FirstName: firstName,
                Email: email,
                PhoneNumber: phone,
                GenderId: genderId,
                HiringDate: hiringDate,
                MaxWeeklyRequest: maxWeeklyRequest,
                Adress: adress,
                City: city,
                PostalCode: postalCode,
                RegionId: regionId,
                AccreditationId: accreditationId,
                OpqNumber: opqNumber,
                Wages: wages,
                IsTaxable: isTaxable,
                TpsNumber: tpsNumber,
                TvqNumber: tvqNumber,
                ProfessionalTitlesIds: profTitleIds,
                ClientTypeIds: clientTypeIds,
                ClientAgeIds: clientAgeIds,
                ConsultationTypesIds: consultationTypeIds,
                LanguageIds: languageIds,
                Certification: certification,
                AdminNotes: adminNote,
                AvailabilityIds: availabilities,
                TakeAssuaranceClient: takeAssurance,
                TakeThirdPartyClient: takeThirdParty,
                IsInterestedFormation: isInterestedFormation,
                Associations: association,
                OfferedServices: offeredService,
                PracticeSectorIds: practice,
                OrientationIds: orientation,
                SkillIds: skill
            }

            return datas
        }

        function VerifyFields() {

            var isPageValid = true



            //Last name
            var lastNameInput = $("#js-detail-therapist-last-name")
            var lastName = lastNameInput.val()

            if (lastName.trim() == "") {
                lastNameInput.addClass("input-validation-error")
                isPageValid = false
            }

            //First name
            var firstNameInput = $("#js-detail-therapist-first-name")
            var firstName = firstNameInput.val()

            if (firstName.trim() == "") {
                firstNameInput.addClass("input-validation-error")
                isPageValid = false
            }

            //Email
            var emailInput = $("#js-detail-therapist-email")
            var email = emailInput.val()

            if (email.trim() == "" || !VerifyFieldWithRegex(emailInput, email, /^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)) {
                emailInput.addClass("input-validation-error")
                isPageValid = false
            }


            //Hiring date
            var hiringDateInput = $("#js-detail-therapist-hiring-date")
            var hiringDate = hiringDateInput.val()

            var momentDate = moment(`${hiringDate.split('-')[2]}-${hiringDate.split('-')[1]}-${hiringDate.split('-')[0]}`)

            if (!momentDate.isValid() || hiringDate == "") {
                hiringDateInput.addClass("input-validation-error")
                isPageValid = false
            }

            //Taxes
            if ($("#js-detail-therapist-is-taxable").prop('checked')) {
                //TPS
                var tpsInput = $("#js-detail-therapist-tps")
                var tps = tpsInput.val()

                if (tps.trim() == "") {
                    tpsInput.addClass("input-validation-error")
                    isPageValid = false
                }

                //TVQ
                var tvqInput = $("#js-detail-therapist-tvq")
                var tvq = tvqInput.val()

                if (tvq.trim() == "") {
                    tvqInput.addClass("input-validation-error")
                    isPageValid = false
                }
            }


            //Taux et tarif
            if ($("#js-wage-tablebody .js-wage-row").length == 0) {
                isPageValid = false

                $("#js-wage-footer .js-wage-name input").addClass("input-validation-error")
                $("#js-wage-footer .js-therapist-wage input").addClass("input-validation-error")
                $("#js-wage-footer .js-client-cost input").addClass("input-validation-error")
            }

            if ($("#js-wage-tablebody .js-wage-row .js-wage-name input").length > 0) {
                isPageValid = false

                $("#js-wage-tablebody .js-wage-row .js-wage-name input").addClass("input-validation-error")
                $("#js-wage-tablebody .js-wage-row .js-therapist-wage input").addClass("input-validation-error")
                $("#js-wage-tablebody .js-wage-row .js-client-cost input").addClass("input-validation-error")
            }




            //Validation association
            $(".js-associationName input, .js-associationNumber input").each(function () {
                if ($(this).val().trim() != "") {
                    $(this).addClass("input-validation-error")
                    isPageValid = false
                }
            })

            //Service offert
            var addServiceInput = $("#js-detail-therapist-add-service-tr .js-ddl-offered-service")
            addServiceInput.removeClass("input-validation-error")
            if (addServiceInput.val() != "null") {
                addServiceInput.addClass("input-validation-error")

                $("#js-detail-therapist-add-service-tr .js-service-type label").each(function () {
                    $(this).addClass("text-danger")
                })
                isPageValid = false
            }

            //Ligne ouverte
            $(".js-ddl-offered-service").not("#js-detail-therapist-add-service-tr .js-ddl-offered-service").each(function () {
                $(this).addClass("input-validation-error")

                $(this).closest("tr").find(".js-service-type label").each(function () {
                    $(this).addClass("text-danger")
                })
                isPageValid = false
            })


            //Secteur de pratique
            var addPracticeInput = $("#js-detail-therapist-practice-add-row-tr .js-ddl-practice")
            addPracticeInput.removeClass("input-validation-error")
            if (addPracticeInput.val() != "null") {
                addPracticeInput.addClass("input-validation-error")
                isPageValid = false
            }

            //Ligne ouverte
            $(".js-ddl-practice").not("#js-detail-therapist-practice-add-row-tr .js-ddl-practice").each(function () {
                $(this).addClass("input-validation-error")
                isPageValid = false
            })


            //Orientation theorique
            var addOrientationInput = $("#js-detail-therapist-add-orientation-tr .js-detail-therapist-orientation-ddl")
            addOrientationInput.removeClass("input-validation-error")
            if (addOrientationInput.val() != "null") {
                addOrientationInput.addClass("input-validation-error")
                isPageValid = false
            }

            //Ligne ouverte
            $(".js-detail-therapist-orientation-ddl").not("#js-detail-therapist-add-orientation-tr .js-detail-therapist-orientation-ddl").each(function () {
                $(this).addClass("input-validation-error")
                isPageValid = false
            })

            //Competence specifique
            var addSkillInput = $("#js-detail-therapist-add-skills-tr .js-detail-therapist-skills-ddl")
            addSkillInput.removeClass("input-validation-error")
            if (addSkillInput.val() != "null") {
                addSkillInput.addClass("input-validation-error")
                isPageValid = false
            }

            //Ligne ouverte
            $(".js-detail-therapist-skills-ddl").not("#js-detail-therapist-add-skills-tr .js-detail-therapist-skills-ddl").each(function () {
                $(this).addClass("input-validation-error")
                isPageValid = false
            })



            if (!isPageValid) {
                //Affiche le toaster d'erreur
                toastr["error"]
                    ("@Global.InvalidFieldError",
                            "@Global.Error");
            }

            return isPageValid


        }


        //--------------------------------------
        //Fonction pour delete une row de la table
        $(document).on("click", ".js-delete-table-row",function () {
            $(this).closest('tr').remove();
            offeredServiceManageOption()
            detailTherapistPracticeManageOption()
            detailTherapistOrientationManageOption()
            detailTherapistSkillsManageOption()
        });




        //-------------------------------------------------- Javascript pour tableau infini des wage -------------------------------------

        //Add row
        $('#wageAddRow').click(function () {
            var tableRow = $(this).closest("tr");
            var wageNameInput = tableRow.children(".js-wage-name").children();
            var therapistWageInput = tableRow.children(".js-therapist-wage").children();
            var clientCostInput = tableRow.children(".js-client-cost").children();
            var isDefaultInput = tableRow.children(".js-wage-is-default").children();

            if (!VerifyWageInputValue(tableRow))
                return false;

            var wageName = EscapeHtmlEntities(wageNameInput.val())
            var therapistWage = EscapeHtmlEntities(therapistWageInput.val())
            var clientCost = EscapeHtmlEntities(clientCostInput.val())
            var isChecked = isDefaultInput.is(":checked")
            var isDefault = (isChecked ? '@Global.Yes' : '@Global.No')

            markup =
                `<tr class='js-wage-row'>
                    <td class='js-wage-name'>${wageName}</td>
                    <td class='js-therapist-wage'>${therapistWage}</td>
                    <td class='js-client-cost'>${clientCost}</td>
                    <td class='js-wage-is-default'>${isDefault}</td>
                    <td class='js-tableButton'>
                        <input type='hidden'
                            class='js-detail-therapist-wage'
                            value="0--split--${wageName}--split--${therapistWage}--split--${clientCost}--split--${isChecked}"/>
                        <input type='hidden'
                            class='js-wage-is-deletable'
                            value='true' />
                        <input type='hidden'
                            class='js-wage-id'
                            value='0' />
                        <div class='btn btn-primary wageModifyRow'>@Global.Edit</div>
                        <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                    </td>
                </tr>`

            if (isDefaultInput.is(":checked")) {
                ChangeDefaultWage()
            }

            $(markup).insertBefore(tableRow);

            //On vide les champs
            wageNameInput.val("");
            therapistWageInput.val("");
            clientCostInput.val("");
            isDefaultInput.prop('checked', false);
        });

        //Modify Row
        $(document).on("click", ".wageModifyRow", function () {
            var tableRow = $(this).closest("tr");



            //On ferme les modifs de toutes les autres rows
            $("#js-wage-tablebody").children("tr").each(function () {
                var previousWageName = $(this).children(".js-tableButton").children(".js-detail-therapist-wage").data("previous-wage-name");
                if (previousWageName != undefined) {
                    CancelWageModif(this)
                }
            });

            var wageId = tableRow.children(".js-tableButton").children(".js-wage-id").val()
            var wageName = EscapeHtmlEntities(tableRow.children(".js-wage-name").html().trim());
            var therapistWage = EscapeHtmlEntities(tableRow.children(".js-therapist-wage").html().trim());
            var clientCost = EscapeHtmlEntities(tableRow.children(".js-client-cost").html().trim());
            var isDefault = tableRow.children(".js-wage-is-default").html().trim()

            var isChecked = (isDefault == '@Global.Yes');
            var checkedCheckbox = (isChecked ? 'checked="checked"' : "");

            var isEditable = (tableRow.children(".js-tableButton").children(".js-wage-is-deletable").val() === 'true')

            var wageNameCell = "";

            if (isEditable) {
                wageNameCell = `<input type='text' class='form-control' value='${wageName}'/>`
            }
            else {
                wageNameCell = wageName
            }

            //Remplce les text pour des textbox
            tableRow.empty();

            markup =
                `<td class='js-wage-name'>
                    ${wageNameCell}
                </td>
                <td class='js-therapist-wage'>
                    <input type='text' class='form-control' value='${therapistWage}'/>
                </td>
                <td class='js-client-cost'>
                    <input type='text' class='form-control' value='${clientCost}'/>
                </td>
                <td class='js-wage-is-default'>
                    <input type='checkbox' ${checkedCheckbox} class='form-check-input' />
                </td>
                <td class='js-tableButton'>
                    <input type='hidden'
                        data-previous-wage-name='${wageName}'
                        data-previous-therapist-wage='${therapistWage}'
                        data-previous-client-cost='${clientCost}'
                        data-previous-wage-is-checked='${isChecked}'
                        data-wage-id='${wageId}'
                        data-is-editable='${isEditable}'/>
                    <div class='btn btn-green wageSaveRow'>
                        <i class='fa-solid fa-floppy-disk'></i></div>
                    <div class='btn btn-danger wageCancelRow'>
                        @Global.Cancel
                    </div>
                </td>`
            tableRow.append(markup);



        });

        //Save row
        $(document).on("click", ".wageSaveRow", function () {
            var tableRow = $(this).closest("tr");

            var isEditable = (tableRow.children(".js-tableButton").children("input").attr("data-is-editable") === 'true');
            var wageId = tableRow.children(".js-tableButton").children("input").attr("data-wage-id");

            var wageName = ""
            if (isEditable) {
                wageName = EscapeHtmlEntities(tableRow.children(".js-wage-name").children("input").val());
            }
            else {
                wageName = tableRow.children(".js-wage-name").html().trim();
            }

            var therapistWage = EscapeHtmlEntities(tableRow.children(".js-therapist-wage").children("input").val());
            var clientCost = EscapeHtmlEntities(tableRow.children(".js-client-cost").children("input").val());
            var isChecked = tableRow.children(".js-wage-is-default").children("input").is(":checked")
            var isDefault = (isChecked ? '@Global.Yes' : '@Global.No');

            if (!VerifyWageInputValue(tableRow))
                return false;

            if (isChecked) {
                ChangeDefaultWage()
            }

            var deleteButton = "";

            if (isEditable) {
                deleteButton =
                    `<div class='btn btn-danger js-delete-table-row'>
                        <i class='fas fa-trash-alt'></i>
                    </div>`
            }

            //On remplace les text box par les labels
            tableRow.empty();

            markup =
                `<td class='js-wage-name'>${wageName}</td>
                <td class='js-therapist-wage'>${therapistWage}</td>
                <td class='js-client-cost'>${clientCost}</td>
                <td class='js-wage-is-default'>${isDefault}</td>
                <td class='js-tableButton'>
                    <input type='hidden'
                        class='js-detail-therapist-wage'
                        value="${wageId}--split--${wageName}--split--${therapistWage}--split--${clientCost}--split--${isChecked}"/>

                    <input type='hidden'
                        class='js-wage-is-deletable'
                        value="${isEditable}"/>

                    <input type='hidden'
                        class='js-wage-id'
                        value="${wageId}"/>

                    <div class='btn btn-primary wageModifyRow'>
                        @Global.Edit
                    </div>
                    ${deleteButton}
                </td>`;

            tableRow.append(markup);
        });

        //Function pour cancel les modifs
        function CancelWageModif(tableRow) {

            var isEditable = (tableRow.children(".js-tableButton").children("input").attr("data-is-editable") === 'true');
            var wageId = tableRow.children(".js-tableButton").children("input").attr("data-wage-id");
            var wageName = EscapeHtmlEntities($(tableRow).children(".js-tableButton").children("input").attr("data-previous-wage-name"));
            var therapistWage = EscapeHtmlEntities($(tableRow).children(".js-tableButton").children("input").attr("data-previous-therapist-wage"));
            var clientCost = EscapeHtmlEntities($(tableRow).children(".js-tableButton").children("input").attr("data-previous-client-cost"));
            var isChecked = $(tableRow).children(".js-tableButton").children("input[type=hidden]").attr("data-previous-wage-is-checked");
            var isDefault = (isChecked ? '@Global.Yes' : '@Global.No');

            var deleteButton = "";

            if (isEditable) {
                deleteButton =
                    `<div class='btn btn-danger js-delete-table-row'>
                        <i class='fas fa-trash-alt'></i>
                    </div>`
            }

            //On remplace les text box par les labels
            $(tableRow).empty();

            markup =
                `<td class='js-wage-name'>${wageName}</td>
                <td class='js-therapist-wage'>${therapistWage}</td>
                <td class='js-client-cost'>${clientCost}</td>
                <td class='js-wage-is-default'>${isDefault}</td>
                <td class='js-tableButton'>
                    <input type='hidden'
                        class='js-detail-therapist-wage'
                        value="${wageId}--split--${wageName}--split--${therapistWage}--split--${clientCost}--split--${isChecked}"/>

                    <input type='hidden'
                        class='js-wage-is-deletable'
                        value="${isEditable}"/>

                    <input type='hidden'
                        class='js-wage-id'
                        value="${wageId}"/>

                    <div class='btn btn-primary wageModifyRow'>
                        @Global.Edit
                    </div>
                    ${deleteButton}
                </td>`;

            $(tableRow).append(markup);
        }

        //Load cancel button
        $(document).on("click", ".wageCancelRow", function () {
            CancelWageModif($(this).closest("tr"))
        });



        //Fonction de verification des champs
        function VerifyWageInputValue(tableRow) {
            var wageNameField = tableRow.children(".js-wage-name").children();
            var therapistWageField = tableRow.children(".js-therapist-wage").children();
            var clientCostField = tableRow.children(".js-client-cost").children();

            //On enleve les classes
            wageNameField.removeClass("input-validation-error")
            therapistWageField.removeClass("input-validation-error")
            clientCostField.removeClass("input-validation-error")

            var isValid = true;

            //On verifie si les champs sont vide
            if (wageNameField.val() != undefined && wageNameField.val().length == 0) {
                wageNameField.addClass("input-validation-error")
                isValid = false;
            }

            if (!isNumeric(therapistWageField.val())) {
                therapistWageField.addClass("input-validation-error")
                isValid = false;
            }

            if (!isNumeric(clientCostField.val())) {
                clientCostField.addClass("input-validation-error")
                isValid = false;
            }

            if (!isValid) {
                 toastr["error"]("@Global.TableInvalidFieldError", "@Global.Error");
            }

            return isValid;
        }


        function isNumeric(str) {
            if (typeof str != "string") return false // we only process strings!
            return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
                !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
        }

        function ChangeDefaultWage() {
            $(".js-wage-row").each(function () {
                // On change le oui par non pour toutes les autres row dans le html
                $(this).find(".js-wage-is-default").html('@Global.No')

                // On change le oui par non pour toutes les autres row dans les string envoyé au serveur
                var oldValue = $(this).find(".js-detail-therapist-wage").val()
                if (typeof oldValue !== 'undefined') {
                    $(this).find(".js-detail-therapist-wage").val(oldValue.replace("True", "False"))
                }
            })
        }











        //-------------------------------------------------- Javascript pour tableau infini des associations -------------------------------------

        //Add row
        $('#associationAddRow').click(function () {
            var tableRow = $(this).closest("tr");
            var associationName = tableRow.children(".js-associationName").children();
            var associationNumber = tableRow.children(".js-associationNumber").children();

            if (!VerifyAssociationInputValue(tableRow))
                return false;

            var associationNameEncoded = EscapeHtmlEntities(associationName.val())
            var associationNumberEncoded = EscapeHtmlEntities(associationNumber.val())

            markup =
                `<tr>
                    <td class='js-associationName'>${associationNameEncoded}</td>
                    <td class='js-associationNumber'>${associationNumberEncoded}</td>
                    <td class='js-tableButton'>
                        <input type='hidden'
                            class='js-detail-therapist-association'
                            value="${associationNameEncoded}--split--${associationNumberEncoded}"/>
                        <div class='btn btn-primary associationModifyRow'>@Global.Edit</div>
                        <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                    </td>
                </tr>`

            $(markup).insertBefore(tableRow);

            //On vide les champs
            associationName.val("");
            associationNumber.val("");
        });

        //Modify Row
        $(document).on("click", ".associationModifyRow", function () {
            var tableRow = $(this).closest("tr");

            //On ferme les modifs de toutes les autres rows
            $("#js-association-tablebody").children("tr").each(function () {
                var previousAssociationName = $(this).children(".js-tableButton").children("input").data("previous-association-name");
                if (previousAssociationName != undefined) {
                    CancelAssociationModif(this)
                }
            });

            var associationName = EscapeHtmlEntities(tableRow.children(".js-associationName").html().trim());
            var associationNumber = EscapeHtmlEntities(tableRow.children(".js-associationNumber").html().trim());

            //Remplce les text pour des textbox
            tableRow.empty();

            markup =
                `<td class='js-associationName'>
                    <input type='text' class='form-control' value='${associationName}'/>
                </td>
                <td class='js-associationNumber'>
                    <input type='text' class='form-control' value='${associationNumber}'/>
                </td>
                <td class='js-tableButton'>
                    <input type='hidden'
                        data-previous-association-name='${associationName}'
                        data-previous-association-number='${associationNumber}'/>
                    <div class='btn btn-green associationSaveRow'>
                        <i class='fa-solid fa-floppy-disk'></i></div>
                    <div class='btn btn-danger associationCancelRow'>
                        @Global.Cancel
                    </div>
                </td>`
            tableRow.append(markup);



        });

        //Save row
        $(document).on("click", ".associationSaveRow", function () {
            var tableRow = $(this).closest("tr");

            var associationName = EscapeHtmlEntities(tableRow.children(".js-associationName").children("input").val());
            var associationNumber = EscapeHtmlEntities(tableRow.children(".js-associationNumber").children("input").val());

            if (!VerifyAssociationInputValue(tableRow))
                return false;

            //On remplace les text box par les labels
            tableRow.empty();

            markup =
                `<td class='js-associationName'>${associationName}</td>
                <td class='js-associationNumber'>${associationNumber}</td>
                <td class='js-tableButton'>
                    <input type='hidden'
                        class='js-detail-therapist-association'
                        value="${associationName}--split--${associationNumber}"/>
                    <div class='btn btn-primary associationModifyRow'>
                        @Global.Edit
                    </div>
                    <div class='btn btn-danger js-delete-table-row'>
                        <i class='fas fa-trash-alt'></i>
                    </div>
                </td>`;

            tableRow.append(markup);


        });

        //Function pour cancel les modifs
        function CancelAssociationModif(tableRow) {
            var associationName = EscapeHtmlEntities($(tableRow).children(".js-tableButton").children("input").data("previous-association-name"));
            var associationNumber = EscapeHtmlEntities($(tableRow).children(".js-tableButton").children("input").data("previous-association-number"));

            //On remplace les text box par les labels
            $(tableRow).empty();

            markup =
                `<td class='js-associationName'>${associationName}</td>
                <td class='js-associationNumber'>${associationNumber}</td>
                <td class='js-tableButton'>
                    <input type='hidden'
                        class='js-detail-therapist-association'
                        value="${associationName}--split--${associationNumber}"/>
                    <div class='btn btn-primary associationModifyRow'>
                        @Global.Edit
                    </div>
                    <div class='btn btn-danger js-delete-table-row'>
                        <i class='fas fa-trash-alt'></i>
                    </div>
                </td>`;

            $(tableRow).append(markup);


        }

        //Load cancel button
        $(document).on("click", ".associationCancelRow", function () {
                CancelAssociationModif($(this).closest("tr"))
        });

        //Fonction de verification des champs
        function VerifyAssociationInputValue(tableRow) {
            var associationNameField = tableRow.children(".js-associationName").children();
            var associationNumberField = tableRow.children(".js-associationNumber").children();

            //On enleve les classes
            associationNameField.removeClass("input-validation-error")
            associationNumberField.removeClass("input-validation-error")

            //On verifie si les champs sont vide
            if (associationNameField.val().length == 0 || associationNumberField.val().length == 0) {
                toastr["error"]("@Global.TableInvalidFieldError", "@Global.Error");

                if (associationNameField.val().length == 0)
                    associationNameField.addClass("input-validation-error")

                if (associationNumberField.val().length == 0)
                    associationNumberField.addClass("input-validation-error")

                return false;
            }

            return true;
        }











        //-------------------------------------------------- Javascript pour tableau infini des services offerts -------------------------------------
        function CheckIfServiceCanAddRow() {
            var services = @Html.Raw(Json.Encode(Model.OfferedServices));

            if (services.length <= $("#js-detail-therapist-offered-service-tbody .js-tableButton input[type=hidden]").length) {
                return false
            }

            return true
        }

        function offeredServiceManageOption(serviceId) {

            $(".js-ddl-offered-service")
                .find('option')
                .remove()

            //Rebuild the options
            var services = @Html.Raw(Json.Encode(Model.OfferedServices));

            $(".js-ddl-offered-service").append($('<option>', {
                value: "null",
                text: "@Global.Choose"
            }))

            for (var i = 0; i < services.length; i++) {
                $(".js-ddl-offered-service").append($('<option>', {
                    value: services[i].Service.Id,
                    text: services[i].Service.Name
                }))
            }

            //On met un selected sur une option
            if (serviceId != undefined) {
                $(".js-ddl-offered-service:eq(0)").val(serviceId)
            }


            //Search for the services already selected
            var serviceIds = []
            $("#js-detail-therapist-offered-service-tbody .js-tableButton input[type=hidden]").each(function () {
                serviceIds.push($(this).data("service-id"))
            })

            //Remove the services already selected
            for (var i = 0; i < serviceIds.length; i++) {
                $(".js-ddl-offered-service")
                    .find("option[value = '" + serviceIds[i] + "']")
                    .remove()
            }

            //On cache le tr ajouter s'il n'y a plus d'option
            $("#js-detail-therapist-add-service-tr").removeClass("d-none")
            if (!CheckIfServiceCanAddRow()) {
                $("#js-detail-therapist-add-service-tr").addClass("d-none")
            }
        }
        offeredServiceManageOption()

        //Fonction de verification des champs
        function VerifyServiceField(tableRow, serviceTypeIds) {
            var serviceNameField = tableRow.children(".js-service-name").children();
            var serviceTypeTexts = tableRow.children(".js-service-type").children("label");

            //On enleve la classe d'erreur
            serviceNameField.removeClass("input-validation-error");
            serviceTypeTexts.removeClass("text-danger");

            //On verifie s'il y a des champs vide
            if (serviceNameField.find(":selected").val() == "null" || serviceTypeIds == "") {

                if (serviceNameField.find(":selected").val() == "null")
                    serviceNameField.addClass("input-validation-error")

                if (serviceTypeIds == "")
                    serviceTypeTexts.addClass("text-danger")

                toastr["error"]("@Global.TableInvalidFieldError", "@Global.Error");

                return false;
            }
            return true;
        }

        //Afficher les check boxes
        $(document).on("change", ".js-ddl-offered-service", function () {
            var serviceId = $(this).val();
            var checkBoxTd = $(this).closest("tr").children(".js-service-type");
            var hiddenField = $(this).closest("tr").children(".js-tableButton").children("input");
            var previousServiceId = hiddenField.data("previous-service-id");
            var previousServiceTypeIds = String(hiddenField.data("previous-service-type-ids")).split(',');

            checkBoxTd.empty();

            var services = @Html.Raw(Json.Encode(Model.OfferedServices));

            markup = ``;
            for (var i = 0; i < services.length; i++) {

                if (services[i].Service.Id == serviceId) {

                    for (var j = 0; j < services[i].ServiceTypes.length; j++) {

                        markup += `<input id="js-service-input-${services[i].ServiceTypes[j].Id}" type='checkbox' value='${services[i].ServiceTypes[j].Id}' name='${services[i].ServiceTypes[j].Name}' `;

                        if (services[i].Service.Id == previousServiceId
                            && previousServiceTypeIds.includes(String(services[i].ServiceTypes[j].Id))) {

                            markup += `checked='checked'`
                        }

                        markup += `/><label for="js-service-input-${services[i].ServiceTypes[j].Id}">${services[i].ServiceTypes[j].Name}</label><br/>`
                    }
                }
            }
            checkBoxTd.append(markup);
        })

        //Add row
        $("#ServiceAddRow").click(function () {

            var tableRow = $(this).closest("tr");
            var serviceName = tableRow.children(".js-service-name").children().find(":selected").text();
            var serviceId = tableRow.children(".js-service-name").children().val();


            var servicesTypeShow = "";
            var serviceTypeNames = [];
            var serviceTypeIds = [];
            tableRow.children(".js-service-type").children("input:checked").each(function (index,value) {
                serviceTypeNames.push($(this).attr("name"));
                serviceTypeIds.push($(this).attr("value"));

                servicesTypeShow += $(this).attr("name");

                if (index != tableRow.children(".js-service-type").children("input:checked").length - 1)
                    servicesTypeShow += ", ";
            });

            if (!VerifyServiceField(tableRow, serviceTypeIds))
                return false;


            //On ajoute la row
            markup =
                `<tr>
                    <td class='js-service-name'>${serviceName}</td>
                    <td class='js-service-type'>${servicesTypeShow}</td>
                    <td class='js-tableButton'>
                        <input type='hidden' data-service-id='${serviceId}' data-service-type-ids='${serviceTypeIds}' class="js-detail-therapist-service" value='${serviceId},${serviceTypeIds}'/>
                        <div class='btn btn-primary js-service-modify-row'>@Global.Edit</div>
                        <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                    </td>
                </tr>`;

            $(markup).insertBefore(tableRow);

            //On vide les champs
            tableRow.children(".js-service-name").children().val("null");
            tableRow.children(".js-service-type").empty();

            offeredServiceManageOption()
        });

        //Modify row
        $(document).on("click", ".js-service-modify-row", function () {
            var tableRow = $(this).closest("tr");
            var serviceName = tableRow.children(".js-service-name").html();
            var serviceId = tableRow.children(".js-tableButton").children("input").data("service-id");
            var serviceTypeIds = tableRow.children(".js-tableButton").children("input").data("service-type-ids");
            var serviceTypeNames = tableRow.children(".js-service-type").html();
            //On ajoute la ddl des serive offert
            var services = @Html.Raw(Json.Encode(Model.OfferedServices));
            var ddlService =
                "<select class='form-select js-ddl-offered-service'></select>"

            //On ajoute la liste des type de service offert
            var cblServiceTypes = "";
            for (var i = 0; i < services.length; i++) {
                if (services[i].Service.Id == serviceId) {
                    for (var j = 0; j < services[i].ServiceTypes.length; j++) {
                        cblServiceTypes += `<input id="js-service-input-${services[i].ServiceTypes[j].Id}" type='checkbox' value='${services[i].ServiceTypes[j].Id}' name='${services[i].ServiceTypes[j].Name}'`;
                        if (serviceTypeNames.includes(services[i].ServiceTypes[j].Name)) {
                            cblServiceTypes += "checked='checked'";
                        }
                        cblServiceTypes += `/><label for="js-service-input-${services[i].ServiceTypes[j].Id}">${services[i].ServiceTypes[j].Name}</label><br/>`;
                    }
                }
            }

            //On remplace les text par des ddl et cbl
            tableRow.empty();
            markup =
                `<td class='js-service-name'>${ddlService}</td>
                <td class='js-service-type'>${cblServiceTypes}</td>
                <td class='js-tableButton'>
                    <input type='hidden' data-previous-service-name='${serviceName}' data-previous-service-id='${serviceId}' data-previous-service-type-ids='${serviceTypeIds}' data-previous-service-names='${serviceTypeNames}' />
                    <div class='btn btn-green js-service-save-row'><i class='fa-solid fa-floppy-disk'></i></div>
                    <div class='btn btn-danger js-service-cancel-row'>@Global.Cancel</div>
                </td>`;
            tableRow.append(markup)

            //On met le dll dans le footer à choisir et le disable le temps de la modif
            $("#js-detail-therapist-add-service-tr .js-ddl-offered-service").val("null")
            $("#js-detail-therapist-add-service-tr .js-ddl-offered-service").prop("disabled", true)

            //On disable tous les autres bouton modifier et ajouter
            $(".js-service-modify-row").addClass("disabled")
            $("#ServiceAddRow").addClass("disabled")

            offeredServiceManageOption(serviceId)
        });

        //Save modification row
        $(document).on("click", ".js-service-save-row", function () {
            var tableRow = $(this).closest("tr");
            var serviceName = tableRow.children(".js-service-name").children().find(":selected").text();
            var serviceId = tableRow.children(".js-service-name").children().val();

            var servicesTypeShow = "";
            var serviceTypeNames = [];
            var serviceTypeIds = [];
            tableRow.children(".js-service-type").children("input:checked").each(function (index,value) {
                serviceTypeNames.push($(this).attr("name"));
                serviceTypeIds.push($(this).attr("value"));

                servicesTypeShow += $(this).attr("name");

                if (index != tableRow.children(".js-service-type").children("input:checked").length - 1)
                    servicesTypeShow += ", ";

            });

            if (!VerifyServiceField(tableRow, serviceTypeIds))
                return false
            //On enleve les ddl et cbl et on mets les labels
            tableRow.empty();
            markup =
                `<td class='js-service-name'>${serviceName}</td>
                <td class='js-service-type'>${servicesTypeShow}</td>
                <td class='js-tableButton'>
                    <input type='hidden' data-service-id='${serviceId}' data-service-type-ids='${serviceTypeIds}' class="js-detail-therapist-service" value='${serviceId},${serviceTypeIds}'/>
                    <div class='btn btn-primary js-service-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>`;
            tableRow.append(markup);

            //Enleve le disable du footer
            $("#js-detail-therapist-add-service-tr .js-ddl-offered-service").prop("disabled", false)

            //On enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-service-modify-row").removeClass("disabled")
            $("#ServiceAddRow").removeClass("disabled")

            offeredServiceManageOption()
        });

        //Cancel Modification row
        $(document).on("click", ".js-service-cancel-row", function () {
            var tableRow = $(this).closest("tr");
            var hiddenfield = tableRow.children(".js-tableButton").children("input")
            var serviceName = hiddenfield.data("previous-service-name");
            var serviceId = hiddenfield.data("previous-service-id");
            var serviceTypeNames = hiddenfield.data("previous-service-names");
            var serviceTypeIds = hiddenfield.data("previous-service-type-ids");
            //On enleve les ddl et cbl et on mets les labels
            tableRow.empty();
            markup =
                `<td class='js-service-name'>${serviceName}</td>
                <td class='js-service-type'>${serviceTypeNames}</td>
                <td class='js-tableButton'>
                    <input type='hidden' data-service-id='${serviceId}' data-service-type-ids='${serviceTypeIds}' class="js-detail-therapist-service" value='${serviceId},${serviceTypeIds}'/>
                    <div class='btn btn-primary js-service-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>`;
            tableRow.append(markup)


            //Enleve le disable du footer
            $("#js-detail-therapist-add-service-tr .js-ddl-offered-service").prop("disabled", false)

            //On enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-service-modify-row").removeClass("disabled")
            $("#ServiceAddRow").removeClass("disabled")

            offeredServiceManageOption()
        });



        //--------------------------------------------------- Javascript pour le tableau infini des secteurs de pratique ---------------------------
        function CheckIfPracticeCanAddRow() {
            //Le maximum de secteur de pratique est de 2

            if ($("#js-detail-therapist-practice-tbody .js-tableButton input[type=hidden]").length >= 2) {
                return false
            }

            return true
        }

        function detailTherapistPracticeManageOption(practiceId) {
            $(".js-ddl-practice")
                .find('option')
                .remove()

            //Rebuild the options
            var practice = @Html.Raw(Json.Encode(Model.AreasOfPractice));

            $(".js-ddl-practice").append($('<option>', {
                value: "null",
                text: "@Global.Choose"
            }))

            for (var i = 0; i < practice.length; i++) {
                $(".js-ddl-practice").append($('<option>', {
                    value: practice[i].Id,
                    text: practice[i].Name
                }))
            }


            //On met un selected sur une option
            if (practiceId != undefined) {
                $(".js-ddl-practice:eq(0)").val(practiceId)
            }


            //Search for the services already selected
            var practiceIds = []
            $("#js-detail-therapist-practice-tbody .js-tableButton input[type=hidden]").each(function () {
                practiceIds.push($(this).data("practice-id"))
            })


            //Remove the services already selected
            for (var i = 0; i < practiceIds.length; i++) {
                $(".js-ddl-practice")
                    .find("option[value='" + practiceIds[i] + "']")
                    .remove()
            }

            //On cache le tr ajouter s'il n'y a plus d'option
            $("#js-detail-therapist-practice-add-row-tr").removeClass("d-none")
            if (!CheckIfPracticeCanAddRow()) {
                $("#js-detail-therapist-practice-add-row-tr").addClass("d-none")
            }

        }
        detailTherapistPracticeManageOption()

        //Fonction pour la validation des champs
        function ValidationPracticeField(tableRow) {
            var practiceNameField = tableRow.children(".js-practice-name").children();
            var practiceNameValue = practiceNameField.find(":selected").val();

            //On enleve la class d'erreur
            practiceNameField.removeClass("input-validation-error");

            //On verifie si on est à choose
            if (practiceNameValue == "null") {
                toastr["error"]("@Global.TableInvalidFieldError",
                    "@Global.Error");
                practiceNameField.addClass("input-validation-error");
                return false;
            }
            return true;
        }

        //Add row
        $("#js-practice-add-row").click(function () {
            var tableRow = $(this).closest('tr');

            if (!ValidationPracticeField(tableRow))
                return false

            var practiceName = tableRow.children(".js-practice-name").children().find(":selected").text();
            var practiceId = tableRow.children(".js-practice-name").children().val();

            //On ajoute la row
            markup =
                `<tr>
                <td class='js-practice-name'>${practiceName}</td>
                <td class="Area-filling-cells"></td>
                <td class='js-tableButton'>
                    <input type='hidden' data-practice-id='${practiceId}' class='practiceIds js-detail-therapist-sector' value='${practiceId}'/>
                    <div class='btn btn-primary js-practice-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>
                </tr>`;

            $(markup).insertBefore(tableRow);

            //On remet la ddl à choisir
            tableRow.children(".js-practice-name").children().val("null");

            detailTherapistPracticeManageOption()
        });

        //Modify Row
        $(document).on("click", ".js-practice-modify-row", function () {
            var tableRow = $(this).closest("tr");
            var practiceName = tableRow.children(".js-practice-name").html();
            var practiceId = tableRow.children(".js-tableButton").children("input").data("practice-id");

            //On remet la ddl
            tableRow.empty();

            //On ajoute la ddl des serive offert
            var practices = @Html.Raw(Json.Encode(Model.AreasOfPractice));
            var ddlPractice =
                "<select class='form-select js-ddl-practice'></select>"

            markup =
                `<td class='js-practice-name'>${ddlPractice}</td>
                <td class="Area-filling-cells"></td>
                <td class='js-tableButton'>
                    <input type='hidden' value='${practiceId}' class='practiceIds' data-previous-practice-name='${practiceName}' data-previous-practice-id='${practiceId}'/>
                    <div class='btn btn-green js-practice-save-row'><i class='fa-solid fa-floppy-disk'></i></div>
                    <div class='btn btn-danger js-practice-cancel-row'>@Global.Cancel</div>
                </td>`;

            tableRow.append(markup);

            //On met le dll dans le footer à choisir et le disable le temps de la modif
            $("#js-detail-therapist-practice-add-row-tr .js-ddl-practice").val("null")
            $("#js-detail-therapist-practice-add-row-tr .js-ddl-practice").prop("disabled", true)

            //On disable tous les autres bouton modifier et ajouter
            $(".js-practice-modify-row").addClass("disabled")
            $("#js-practice-add-row").addClass("disabled")

            detailTherapistPracticeManageOption(practiceId)
        });

        //Save modification row
        $(document).on('click', ".js-practice-save-row", function () {
                var tableRow = $(this).closest("tr");
                var practiceName = tableRow.children(".js-practice-name").children().find(":selected").text();
                var practiceId = tableRow.children(".js-practice-name").children().val();

            //La validation du champs
            if (!ValidationPracticeField(tableRow))
                return false

                //On modifie la row
                tableRow.empty();

                markup =
                    `<td class='js-practice-name'>${practiceName}</td>
                    <td class="Area-filling-cells"></td>
                    <td class='js-tableButton'>
                        <input type='hidden' data-practice-id='${practiceId}' class="js-detail-therapist-sector" value='${practiceId}'/>
                        <div class='btn btn-primary js-practice-modify-row'>@Global.Edit</div>
                        <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                    </td>`;

            tableRow.append(markup);

            //Enleve le disable du footer
            $("#js-detail-therapist-practice-add-row-tr .js-ddl-practice").prop("disabled", false)

            //On enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-practice-modify-row").removeClass("disabled")
            $("#js-practice-add-row").removeClass("disabled")

            detailTherapistPracticeManageOption()
        });

        //Cancel Modification row
        $(document).on("click", ".js-practice-cancel-row", function () {
                var tableRow = $(this).closest("tr");
                var practiceName = tableRow.children(".js-tableButton").children("input").data("previous-practice-name");
                var practiceId = tableRow.children(".js-tableButton").children("input").data("previous-practice-id");

                //On modifie la row
                tableRow.empty();

                markup =
                    `<td class='js-practice-name'>${practiceName}</td>
                    <td class="Area-filling-cells"></td>
                    <td class='js-tableButton'>
                        <input type='hidden' data-practice-id='${practiceId}' class="js-detail-therapist-sector" value='${practiceId}'/>
                        <div class='btn btn-primary js-practice-modify-row'>@Global.Edit</div>
                        <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                    </td>`;

            tableRow.append(markup);

            //Enleve le disable du footer
            $("#js-detail-therapist-practice-add-row-tr .js-ddl-practice").prop("disabled", false)

            //On enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-practice-modify-row").removeClass("disabled")
            $("#js-practice-add-row").removeClass("disabled")

            detailTherapistPracticeManageOption()
        });


        //--------------------------------------------------- Javascript pour le tableau infini des orientations théoriques ---------------------------
        function CheckIfOrientationCanAddRow() {
            //Le maximum de secteur de pratique est de 2
            if ($("#js-detail-therapist-orientation-tbody .js-orientation-buttons input[type=hidden]").length >= 2) {
                return false
            }

            return true
        }

        function detailTherapistOrientationManageOption(orientationId) {
            $(".js-detail-therapist-orientation-ddl")
                .find('option')
                .remove()

            //Rebuild the options
            var orientations = @Html.Raw(Json.Encode(Model.TheoreticalOrientations));

            $(".js-detail-therapist-orientation-ddl").append($('<option>', {
                value: "null",
                text: "@Global.Choose"
            }))

            for (var i = 0; i < orientations.length; i++) {
                $(".js-detail-therapist-orientation-ddl").append($('<option>', {
                    value: orientations[i].Id,
                    text: orientations[i].Name
                }))
            }


            //On met un selected sur une option
            if (orientationId != undefined) {
                $(".js-detail-therapist-orientation-ddl:eq(0)").val(orientationId)
            }


            //Search for the services already selected
            var orientationIds = []
            $("#js-detail-therapist-orientation-tbody .js-orientation-buttons input[type=hidden]").each(function () {
                orientationIds.push($(this).data("orientation-id"))
            })


            //Remove the services already selected
            for (var i = 0; i < orientationIds.length; i++) {
                $(".js-detail-therapist-orientation-ddl")
                    .find("option[value='" + orientationIds[i] + "']")
                    .remove()
            }

            //On cache le tr ajouter s'il n'y a plus d'option
            $("#js-detail-therapist-add-orientation-tr").removeClass("d-none")
            if (!CheckIfOrientationCanAddRow()) {
                $("#js-detail-therapist-add-orientation-tr").addClass("d-none")
            }

        }
        detailTherapistOrientationManageOption()

        //Fonction pour la validation des champs
        function ValidationOrientationField(tableRow) {
            var orientationNameField = tableRow.children(".js-orientation-name").children();
            var orientationNameValue = orientationNameField.find(":selected").val();

            //On enleve la class d'erreur
            orientationNameField.removeClass("input-validation-error");

            //On verifie si on est à choose
            if (orientationNameValue == "null") {
                toastr["error"]("@Global.TableInvalidFieldError",
                    "@Global.Error");
                orientationNameField.addClass("input-validation-error");
                return false;
            }
            return true;
        }

        //Modify Row
        $(document).on("click", ".js-orientation-modify-row", function () {
            var tableRow = $(this).closest("tr");
            var orientationName = tableRow.children(".js-orientation-name").html().trim();
            var orientationId = tableRow.children(".js-orientation-buttons").children("input").data("orientation-id");

            //On remet la ddl
            tableRow.empty();

            //On ajoute la ddl des serive offert
            var orientations = @Html.Raw(Json.Encode(Model.TheoreticalOrientations));
            var ddlOrientation =
                "<select class='form-select js-detail-therapist-orientation-ddl'></select>"

            markup =
                `<td class='js-orientation-name'>${ddlOrientation}</td>
                <td class="Orientation-filling-cells"></td>
                <td class='js-orientation-buttons'>
                    <input type='hidden' data-previous-orientation-name='${orientationName}' data-previous-orientation-id='${orientationId}'/>
                    <div class='btn btn-green js-orientation-save-row'><i class='fa-solid fa-floppy-disk'></i></div>
                    <div class='btn btn-danger js-orientation-cancel-row'>@Global.Cancel</div>
                </td>`;

            tableRow.append(markup);

            //disable du footer
            $("#js-detail-therapist-add-orientation-tr .js-detail-therapist-orientation-ddl").prop("disabled", true)

            // disable sur tous les autres bouton modifier et ajouter
            $(".js-orientation-modify-row").addClass("disabled")
            $("#js-orientation-add-row").addClass("disabled")

            detailTherapistOrientationManageOption(orientationId)
        });

        //Save modification row
        $(document).on("click", ".js-orientation-save-row", function () {
            var tableRow = $(this).closest("tr");

            if (!ValidationOrientationField(tableRow))
                return false;

            var orientationName = tableRow.children(".js-orientation-name").children().find(":selected").text();
            var orientationId = tableRow.children(".js-orientation-name").children().val();

            //On modifie la row
            tableRow.empty();

            markup =
                `<td class='js-orientation-name'>${orientationName}</td>
                <td class="Orientation-filling-cells"></td>
                <td class='js-orientation-buttons'>
                    <input type='hidden' data-orientation-id='${orientationId}' class='js-detail-therapist-orientation' value='${orientationId}'/>
                    <div class='btn btn-primary js-orientation-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>`;

            tableRow.append(markup);

            //Enleve le disable du footer
            $("#js-detail-therapist-add-orientation-tr .js-detail-therapist-orientation-ddl").prop("disabled", false)

            //On enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-orientation-modify-row").removeClass("disabled")
            $("#js-orientation-add-row").removeClass("disabled")

            detailTherapistOrientationManageOption()

        });

        //Cancel Modification row
        $(document).on("click", ".js-orientation-cancel-row", function () {
            var tableRow = $(this).closest("tr");
            var orientationName = tableRow.children(".js-orientation-buttons").children("input").data("previous-orientation-name");
            var orientationId = tableRow.children(".js-orientation-buttons").children("input").data("previous-orientation-id");

            //On modifie la row
            tableRow.empty();

            markup =
                `<td class='js-orientation-name'>${orientationName}</td>
                <td class="Orientation-filling-cells"></td>
                <td class='js-orientation-buttons'>
                    <input type='hidden' data-orientation-id='${orientationId}' class='js-detail-therapist-orientation' value='${orientationId}'/>
                    <div class='btn btn-primary js-orientation-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>`;

            tableRow.append(markup);

            //Enleve le disable du footer
            $("#js-detail-therapist-add-orientation-tr .js-detail-therapist-orientation-ddl").prop("disabled", false)

            //On enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-orientation-modify-row").removeClass("disabled")
            $("#js-orientation-add-row").removeClass("disabled")

            detailTherapistOrientationManageOption()
        });

        //Add row
        $("#js-orientation-add-row").click(function () {

            if (!CheckIfOrientationCanAddRow()) {
                return false
            }

            var tableRow = $(this).closest('tr');

            if (!ValidationOrientationField(tableRow))
                return false

            var orientationName = tableRow.children(".js-orientation-name").children().find(":selected").text();
            var orientationId = tableRow.children(".js-orientation-name").children().val();

            //On ajoute la row
            markup =
                `<tr>
                    <td class='js-orientation-name'>${orientationName}</td>
                    <td class="Orientation-filling-cells"></td>
                    <td class='js-orientation-buttons'>
                        <input type='hidden' data-orientation-id='${orientationId}' class='js-detail-therapist-orientation' value='${orientationId}'/>
                        <div class='btn btn-primary js-orientation-modify-row'>@Global.Edit</div>
                        <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                    </td>
                </tr>`;

            $(markup).insertBefore(tableRow);

            //On remet la ddl à choisir
            tableRow.children(".js-orientation-name").children().val("null");

            detailTherapistOrientationManageOption()
        });



        //--------------------------------------------------- Javascript pour le tableau infini des compétences specifique ---------------------------
        function DetailTherapistCheckIfSkillCanAddRow() {
            var skills = @Html.Raw(Json.Encode(Model.SpecificSkills));
            if (skills.length <= $("#js-detail-therapist-skills-tbody .js-skill-buttons input[type=hidden]").length) {
                return false
            }

            return true
        }

        function detailTherapistSkillsManageOption(skillsId) {
            $(".js-detail-therapist-skills-ddl")
                .find('option')
                .remove()

            //Rebuild the options
            var skills = @Html.Raw(Json.Encode(Model.SpecificSkills));

            $(".js-detail-therapist-skills-ddl").append($('<option>', {
                value: "null",
                text: "@Global.Choose"
            }))

            for (var i = 0; i < skills.length; i++) {
                $(".js-detail-therapist-skills-ddl").append($('<option>', {
                    value: skills[i].Id,
                    text: skills[i].Name
                }))
            }


            //On met un selected sur une option
            if (skillsId != undefined) {
                $(".js-detail-therapist-skills-ddl:eq(0)").val(skillsId)
            }


            //Search for the services already selected
            var skillIds = []
            $("#js-detail-therapist-skills-tbody .js-skill-buttons input[type=hidden]").each(function () {
                skillIds.push($(this).data("skill-id"))
            })


            //Remove the services already selected
            for (var i = 0; i < skillIds.length; i++) {
                $(".js-detail-therapist-skills-ddl")
                    .find("option[value='" + skillIds[i] + "']")
                    .remove()
            }

            //On cache le tr ajouter s'il n'y a plus d'option
            $("#js-detail-therapist-add-skills-tr").removeClass("d-none")
            if (!DetailTherapistCheckIfSkillCanAddRow()) {
                $("#js-detail-therapist-add-skills-tr").addClass("d-none")
            }

        }
        detailTherapistSkillsManageOption()

        //Fonction pour la validation des champs
        function ValidationSkillField(tableRow) {
            var skillNameField = tableRow.children(".js-skill-name").children();
            var skillNameValue = skillNameField.find(":selected").val();

            //On enleve la class d'erreur
            skillNameField.removeClass("input-validation-error");

            //On verifie si on est à choose
            if (skillNameValue == "null") {
                toastr["error"]("@Global.TableInvalidFieldError",
                    "@Global.Error");
                skillNameField.addClass("input-validation-error");
                return false;
            }
            return true;
        }

        //Modify Row
        $(document).on("click", ".js-skill-modify-row", function () {
            var tableRow = $(this).closest("tr");
            var skillName = tableRow.children(".js-skill-name").html().trim();
            var skillId = tableRow.children(".js-skill-buttons").children("input").data("skill-id");

            //On remet la ddl
            tableRow.empty();

            //On ajoute la ddl des serive offert
            var skills = @Html.Raw(Json.Encode(Model.SpecificSkills));
            var ddlSkill =
                "<select class='form-select js-detail-therapist-skills-ddl'></select>"

            markup =
                `<td class='js-skill-name'>${ddlSkill}</td>
                <td class='Competences-filling-cells'></td>
                <td class='js-skill-buttons'>
                    <input type='hidden' data-previous-skill-name='${skillName}' data-previous-skill-id='${skillId}'/>
                    <div class='btn btn-green js-skill-save-row'><i class='fa-solid fa-floppy-disk'></i></div>
                    <div class='btn btn-danger js-skill-cancel-row'>@Global.Cancel</div>
                </td>`;

            tableRow.append(markup);

            //Met le disable du footer
            $("#js-detail-therapist-add-skills-tr .js-detail-therapist-skills-ddl").prop("disabled", true)

            //On met le disable sur tous les autres bouton modifier et ajouter
            $(".js-skill-modify-row").addClass("disabled")
            $("#js-skill-add-row").addClass("disabled")

            detailTherapistSkillsManageOption(skillId)
        });

        //Save modification row
        $(document).on("click", ".js-skill-save-row", function () {
            var tableRow = $(this).closest("tr");

            //Validation des champs
            if (!ValidationSkillField(tableRow))
                return false;

            var skillName = tableRow.children(".js-skill-name").children().find(":selected").text();
            var skillId = tableRow.children(".js-skill-name").children().val();

            //On modifie la row
            tableRow.empty();

            markup =
                `<td class='js-skill-name'>${skillName}</td>
                <td class='Competences-filling-cells'></td>
                <td class='js-skill-buttons'>
                    <input type='hidden' data-skill-id='${skillId}' class='js-detail-therapist-skill' value='${skillId}'/>
                    <div class='btn btn-primary js-skill-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>`;

            tableRow.append(markup);

            //enleve le disable du footer
            $("#js-detail-therapist-add-skills-tr .js-detail-therapist-skills-ddl").prop("disabled", false)

            //enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-skill-modify-row").removeClass("disabled")
            $("#js-skill-add-row").removeClass("disabled")

            detailTherapistSkillsManageOption()
        });

        //Cancel Modification row
        $(document).on("click", ".js-skill-cancel-row", function () {
            var tableRow = $(this).closest("tr");
            var skillName = tableRow.children(".js-skill-buttons").children("input").data("previous-skill-name");
            var skillId = tableRow.children(".js-skill-buttons").children("input").data("previous-skill-id");

            //On modifie la row
            tableRow.empty();

            markup =
                `<td class='js-skill-name'>${skillName}</td>
                <td class='Competences-filling-cells'></td>
                <td class='js-skill-buttons'>
                    <input type='hidden' data-skill-id='${skillId}' class='js-detail-therapist-skill' value='${skillId}'/>
                    <div class='btn btn-primary js-skill-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>`;

            tableRow.append(markup);

            //enleve le disable du footer
            $("#js-detail-therapist-add-skills-tr .js-detail-therapist-skills-ddl").prop("disabled", false)

            //enleve le disable sur tous les autres bouton modifier et ajouter
            $(".js-skill-modify-row").removeClass("disabled")
            $("#js-skill-add-row").removeClass("disabled")

            detailTherapistSkillsManageOption()
        });

        //Add row
        $("#js-skill-add-row").click(function () {

            if (!DetailTherapistCheckIfSkillCanAddRow()) {
                return false
            }

            var tableRow = $(this).closest('tr');

            //Validation des champs
            if (!ValidationSkillField(tableRow))
                return false;

            var skillName = tableRow.children(".js-skill-name").children().find(":selected").text();
            var skillId = tableRow.children(".js-skill-name").children().val();

            //On ajoute la row
            markup =
                `<tr>
                <td class='js-skill-name'>${skillName}</td>
                <td class='Competences-filling-cells'></td>
                <td class='js-skill-buttons'>
                    <input type='hidden' data-skill-id='${skillId}' class='js-detail-therapist-skill' value='${skillId}'/>
                    <div class='btn btn-primary js-skill-modify-row'>@Global.Edit</div>
                    <div class='btn btn-danger js-delete-table-row'><i class='fas fa-trash-alt'></i></div>
                </td>
                </tr>`;

            $(markup).insertBefore(tableRow);

            //On remet la ddl à choisir
            tableRow.children(".js-skill-name").children().val("null");

            detailTherapistSkillsManageOption()
        });

        //---------------------------------------- Show taxe text box -------------------------------

        function DetailTherapistShowTaxesTextBox() {

            var taxesRow = $("#js-detail-therapist-taxes-row")

            taxesRow.addClass("d-none")

            if ($('#js-detail-therapist-is-taxable').is(":checked")) {
                taxesRow.removeClass("d-none")
            }
        }

        DetailTherapistShowTaxesTextBox()

        $('#js-detail-therapist-is-taxable').on("change", function () {
            DetailTherapistShowTaxesTextBox()
        })

        //-------------------------------------------------- Autre javascript --------------------------------------------------
        //Numero de l'opq
        $("#js-detail-therapist-accreditation").on("change", function () {
            var selectedVal = $(this).val();
            var opqNumberDiv = $("#js-detail-therapist-opq-div")

            opqNumberDiv.removeClass("d-none"); //On enleve le invisible par defaut

            if (selectedVal != "1" && selectedVal != "2") {
                //Le choix n'est pas mis a Psychologue ou psychothérapeute
                opqNumberDiv.addClass("d-none");
            }

        });


        if ("@(CultureInfo.CurrentCulture.Name)" != "fr-CA") {
            $.datepicker.setDefaults($.datepicker.regional[""]);
        }

        $("#js-detail-therapist-max-request").mask("9999")
        $("#js-detail-therapist-postal-code").mask("S0S 0S0")
        $("#js-detail-therapist-hourly-wage").mask("###0.##", { reverse: true });
        $("#js-detail-therapist-client-cost").mask("###0.##", { reverse: true });


    </script>
}
